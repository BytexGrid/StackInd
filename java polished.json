{
  "java_developer used tools:": {

  "java_software_stack": {
    "IDEs": [
      {
        "name": "IntelliJ IDEA",
        "publisher": "JetBrains",
        "description": "A powerful and ergonomic Java IDE for productive development. Available in Community (free, open-source) and Ultimate (commercial) editions.",
        "versions": [
          {
            "version_name": "Latest Community Edition (e.g., 2024.1.4)",
            "release_date": "Constantly updated, refer to JetBrains website",
            "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)"],
            "installation_methods": [
              {
                "method_name": "Direct Download (Windows)",
                "type": "Executable Installer",
                "instructions": [
                  "1. Visit the official JetBrains IntelliJ IDEA download page: https://www.jetbrains.com/idea/download/",
                  "2. Download the **.exe installer** for the Community Edition (64-bit, choose architecture).",
                  "3. Run the installer and follow the on-screen prompts. You can choose the installation path, create desktop shortcuts, and associate .java files.",
                  "4. After installation, ensure a **JDK** is installed and configured within IntelliJ IDEA (File > Project Structure > SDKs)."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (macOS - Intel)",
                "type": "DMG Installer",
                "instructions": [
                  "1. Visit the official JetBrains IntelliJ IDEA download page: https://www.jetbrains.com/idea/download/",
                  "2. Download the **.dmg installer** for the Community Edition (Intel processor).",
                  "3. Open the .dmg file. Drag the 'IntelliJ IDEA CE.app' application to your **Applications** folder."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (macOS - Apple Silicon)",
                "type": "DMG Installer",
                "instructions": [
                  "1. Visit the official JetBrains IntelliJ IDEA download page: https://www.jetbrains.com/idea/download/",
                  "2. Download the **.dmg installer** for the Community Edition (Apple Silicon processor).",
                  "3. Open the .dmg file. Drag the 'IntelliJ IDEA CE.app' application to your **Applications** folder."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (Linux - Tar.gz)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the official JetBrains IntelliJ IDEA download page: https://www.jetbrains.com/idea/download/",
                  "2. Download the **.tar.gz archive** for the Community Edition (choose x64 or ARM64).",
                  "3. Open a terminal and navigate to your download directory.",
                  "4. Extract the archive: `sudo tar -xzf ideaIC-*.tar.gz -C /opt/` (replace `ideaIC-*.tar.gz` with the actual filename, and `/opt/` with your preferred installation directory).",
                  "5. Navigate into the extracted directory: `cd /opt/ideaIC-*/bin`",
                  "6. Run the IDE: `./idea.sh`"
                ],
                "installation_query": "wget https://download.jetbrains.com/idea/ideaIC-YYYY.R.R.tar.gz -O /tmp/ideaIC.tar.gz && sudo tar -xzf /tmp/ideaIC.tar.gz -C /opt/ && /opt/ideaIC-YYYY.R.R/bin/idea.sh"
              },
              {
                "method_name": "Snap (Linux)",
                "type": "Package Manager / Software Store",
                "instructions": ["1. Ensure Snap is installed on your Linux distribution (`sudo apt install snapd` or similar).", "2. Install IntelliJ IDEA Community Edition via Snap or the Snap Store GUI."],
                "installation_query": "sudo snap install intellij-idea-community --classic"
              },
              {
                "method_name": "Homebrew Cask (macOS)",
                "type": "Package Manager / Software Store",
                "instructions": ["1. Ensure Homebrew and Homebrew Cask are installed (`/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`).", "2. Install IntelliJ IDEA Community Edition via Cask."],
                "installation_query": "brew install --cask intellij-idea-ce"
              },
              {
                "method_name": "Winget (Windows 10/11)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Winget is installed (usually comes with modern Windows versions or from Microsoft Store).",
                  "2. Open PowerShell or Command Prompt as Administrator.",
                  "3. Install IntelliJ IDEA Community Edition."
                ],
                "installation_query": "winget install JetBrains.IntelliJIDEA.Community"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed (visit https://chocolatey.org/install for instructions).",
                  "2. Open an elevated PowerShell or Command Prompt (Run as Administrator).",
                  "3. Install IntelliJ IDEA Community Edition using Chocolatey."
                ],
                "installation_query": "choco install intellijidea-community"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed (visit https://scoop.sh/ for instructions).",
                  "2. Open PowerShell.",
                  "3. Install IntelliJ IDEA Community Edition using Scoop."
                ],
                "installation_query": "scoop install intellijidea-community"
              }
            ]
          },
          {
            "version_name": "IntelliJ IDEA Ultimate (Latest)",
            "release_date": "Constantly updated, commercial license required",
            "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)"],
            "notes": "Commercial version with advanced features for web, enterprise, and mobile development.",
            "installation_methods": [
              {
                "method_name": "Direct Download (Windows)",
                "type": "Executable Installer",
                "instructions": [
                  "1. Visit the official JetBrains IntelliJ IDEA Ultimate download page: https://www.jetbrains.com/idea/download/",
                  "2. Download the **.exe installer** for the Ultimate Edition.",
                  "3. Run the installer and follow the prompts. A valid license is required after the trial period."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "JetBrains Toolbox App",
                "type": "Centralized Manager",
                "instructions": [
                  "1. Download and install the JetBrains Toolbox App: https://www.jetbrains.com/lp/toolbox/",
                  "2. Open the Toolbox App. It will automatically detect installed JetBrains IDEs and allow you to install, update, and manage new ones.",
                  "3. Locate 'IntelliJ IDEA Ultimate' in the list and click 'Install'.",
                  "4. Manage different versions and JDKs directly from the Toolbox App."
                ],
                "installation_query": "N/A (GUI tool for installation)"
              },
              {
                "method_name": "Homebrew Cask (macOS)",
                "type": "Package Manager / Software Store",
                "instructions": ["1. Ensure Homebrew is installed.", "2. Install IntelliJ IDEA Ultimate via Cask."],
                "installation_query": "brew install --cask intellij-idea"
              },
              {
                "method_name": "Winget (Windows 10/11)",
                "type": "Package Manager / Software Store",
                "instructions": ["1. Ensure Winget is installed.", "2. Open PowerShell as Administrator.", "3. Install IntelliJ IDEA Ultimate."],
                "installation_query": "winget install JetBrains.IntelliJIDEA"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install IntelliJ IDEA Ultimate using Chocolatey."
                ],
                "installation_query": "choco install intellijidea"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Install IntelliJ IDEA Ultimate using Scoop."
                ],
                "installation_query": "scoop install intellijidea"
              }
            ]
          }
        ]
      },
      {
        "name": "Eclipse IDE",
        "publisher": "Eclipse Foundation",
        "description": "A widely used open-source IDE for Java and various other programming languages, known for its extensive plugin ecosystem.",
        "versions": [
          {
            "version_name": "Latest Release (e.g., 2024-03 R)",
            "release_date": "Quarterly releases (March, June, September, December)",
            "supported_oses": ["Windows (x64)", "macOS (Intel, Apple Silicon)", "Linux (x64)"],
            "installation_methods": [
              {
                "method_name": "Eclipse Installer (Recommended)",
                "type": "GUI Installer",
                "instructions": [
                  "1. Visit the Eclipse Downloads page: https://www.eclipse.org/downloads/",
                  "2. Download the **Eclipse Installer** for your operating system (Windows x86_64, macOS x86_64, macOS AArch64, Linux x86_64).",
                  "3. Run the installer (e.g., `eclipse-inst.exe` on Windows, `eclipse-inst` on Linux after extracting the tar.gz).",
                  "4. Select the desired Eclipse IDE package (e.g., 'Eclipse IDE for Java Developers' or 'Eclipse IDE for Enterprise Java and Web Developers').",
                  "5. Choose the installation folder and a compatible Java Virtual Machine (JVM).",
                  "6. Click 'Install' and accept the license agreements."
                ],
                "installation_query": "N/A (GUI installer, though some components can be installed via command line after initial setup)"
              },
              {
                "method_name": "Direct Download (Windows - ZIP)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the Eclipse IDE for Java Developers download page (or specific package): https://www.eclipse.org/downloads/packages/.",
                  "2. Download the appropriate **.zip file** for Windows (x86_64).",
                  "3. Extract the contents of the zip file to a directory of your choice (e.g., `C:\\eclipse`).",
                  "4. Navigate into the extracted `eclipse` folder.",
                  "5. Run `eclipse.exe`."
                ],
                "installation_query": "Invoke-WebRequest -Uri 'https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/YYYY-RR/R/eclipse-java-YYYY-RR-R-win32-x86_64.zip&mirror_id=1' -OutFile 'eclipse.zip' ; Expand-Archive -Path 'eclipse.zip' -DestinationPath 'C:\\eclipse' ; & 'C:\\eclipse\\eclipse\\eclipse.exe'"
              },
              {
                "method_name": "Direct Download (macOS - TAR.GZ)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the Eclipse IDE for Java Developers download page: https://www.eclipse.org/downloads/packages/.",
                  "2. Download the appropriate **.tar.gz file** for macOS (x86_64 or AArch64).",
                  "3. Open Terminal.",
                  "4. Navigate to your Downloads folder (or where you downloaded the file).",
                  "5. Extract the archive: `tar -xzf eclipse-java-*-macosx-cocoa-x86_64.tar.gz -C /Applications/` (adjust filename and target directory for Apple Silicon if needed).",
                  "6. Eclipse will now be available in your Applications folder."
                ],
                "installation_query": "wget https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/YYYY-RR/R/eclipse-java-YYYY-RR-R-macosx-cocoa-x86_64.tar.gz&mirror_id=1 -O /tmp/eclipse.tar.gz && sudo tar -xzf /tmp/eclipse.tar.gz -C /Applications/"
              },
              {
                "method_name": "Direct Download (Linux - TAR.GZ)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the Eclipse IDE for Java Developers download page: https://www.eclipse.org/downloads/packages/.",
                  "2. Download the appropriate **.tar.gz file** for Linux (x86_64).",
                  "3. Open Terminal.",
                  "4. Navigate to your Downloads folder.",
                  "5. Extract the archive: `sudo tar -xzf eclipse-java-*-linux-gtk-x86_64.tar.gz -C /opt/` (or your preferred installation directory).",
                  "6. Create a desktop shortcut (optional, but recommended for easier launch)."
                ],
                "installation_query": "wget https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/YYYY-RR/R/eclipse-java-YYYY-RR-R-linux-gtk-x86_64.tar.gz&mirror_id=1 -O /tmp/eclipse.tar.gz && sudo tar -xzf /tmp/eclipse.tar.gz -C /opt/ && /opt/eclipse/eclipse"
              },
              {
                "method_name": "Snap (Linux)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Snapd is installed and configured on your system (`sudo apt install snapd`).",
                  "2. Install Eclipse IDE via Snap or the Snap Store GUI."
                ],
                "installation_query": "sudo snap install eclipse --classic"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install Eclipse IDE for Java Developers using Chocolatey."
                ],
                "installation_query": "choco install eclipse-java"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Add the 'extras' bucket: `scoop bucket add extras` (if not already added).",
                  "4. Install Eclipse IDE for Java Developers using Scoop."
                ],
                "installation_query": "scoop install eclipse-java"
              }
            ]
          },
          {
            "version_name": "Eclipse Oxygen (4.7)",
            "release_date": "June 2017",
            "supported_oses": ["Windows (x64)", "macOS (Intel)", "Linux (x64)"],
            "notes": "Requires **Java 8**. Used for older projects or specific plugin compatibility.",
            "installation_methods": [
              {
                "method_name": "Direct Download (Archive)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the Eclipse Archives page for Oxygen: https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-win32-x86_64.zip&mirror_id=1 (adjust for OS and specific package).",
                  "2. Download the appropriate zip/tar.gz file.",
                  "3. Extract to your desired location.",
                  "4. Ensure you have a **Java 8 JDK** installed and set as your **JAVA_HOME** environment variable, or configure it within Eclipse."
                ],
                "installation_query": "wget https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz&mirror_id=1 -O /tmp/eclipse-oxygen.tar.gz && sudo tar -xzf /tmp/eclipse-oxygen.tar.gz -C /opt/"
              }
            ]
          }
        ]
      },
      {
        "name": "Apache NetBeans",
        "publisher": "Apache Software Foundation",
        "description": "An open-source IDE for Java, C/C++, PHP, and other technologies. Known for its strong support for desktop, web, and mobile application development.",
        "versions": [
          {
            "version_name": "Latest LTS (e.g., 21)",
            "release_date": "Annually for LTS, more frequently for others",
            "supported_oses": ["Windows (x64)", "macOS (Intel, Apple Silicon)", "Linux (x64)"],
            "installation_methods": [
              {
                "method_name": "Direct Download (Windows Installer)",
                "type": "Executable Installer",
                "instructions": [
                  "1. Visit the Apache NetBeans downloads page: https://netbeans.apache.org/download/index.html",
                  "2. Download the Windows installer (`.exe`) for the latest stable version.",
                  "3. Run the installer and follow the wizard. You can choose components to install (Java SE, Java EE, HTML5/JS, PHP, C/C++).",
                  "4. Ensure a compatible **JDK** is present on your system or specified during installation."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (macOS Installer)",
                "type": "DMG Installer",
                "instructions": [
                  "1. Visit the Apache NetBeans downloads page: https://netbeans.apache.org/download/index.html",
                  "2. Download the macOS installer (`.dmg`) for the latest stable version.",
                  "3. Open the .dmg file and drag the NetBeans application to your **Applications** folder."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (Linux - SH Installer)",
                "type": "Executable Script",
                "instructions": [
                  "1. Visit the Apache NetBeans downloads page: https://netbeans.apache.org/download/index.html",
                  "2. Download the Linux installer (`.sh`) for the latest stable version.",
                  "3. Open a terminal, navigate to the download directory.",
                  "4. Make the installer executable: `chmod +x apache-netbeans-*-bin-linux-x64.sh`",
                  "5. Run the installer: `sudo ./apache-netbeans-*-bin-linux-x64.sh`",
                  "6. Follow the graphical installer prompts. Ensure a compatible **JDK** is installed."
                ],
                "installation_query": "wget https://www.apache.org/dyn/closer.cgi?NG=true&action=download&filename=netbeans/netbeans/LATEST_STABLE/Apache-NetBeans-LATEST_STABLE-bin-linux-x64.sh -O /tmp/netbeans.sh && chmod +x /tmp/netbeans.sh && sudo /tmp/netbeans.sh"
              },
              {
                "method_name": "Snap (Linux)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Snapd is installed and running on your Linux distribution.",
                  "2. Install Apache NetBeans via Snap or the Snap Store GUI."
                ],
                "installation_query": "sudo snap install netbeans --classic"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install Apache NetBeans using Chocolatey."
                ],
                "installation_query": "choco install netbeans"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Add the 'extras' bucket: `scoop bucket add extras` (if not already added).",
                  "4. Install Apache NetBeans using Scoop."
                ],
                "installation_query": "scoop install netbeans"
              }
            ]
          }
        ]
      },
      {
        "name": "Visual Studio Code (with Java Extension Pack)",
        "publisher": "Microsoft",
        "description": "A lightweight but powerful source code editor that runs on your desktop. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages and runtimes, including Java.",
        "versions": [
          {
            "version_name": "Latest Stable",
            "release_date": "Monthly",
            "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)"],
            "installation_methods": [
              {
                "method_name": "Direct Download (Windows Installer)",
                "type": "Executable Installer",
                "instructions": [
                  "1. Visit the official VS Code download page: https://code.visualstudio.com/download",
                  "2. Download the 'User Installer' or 'System Installer' for Windows (x64 or ARM64).",
                  "3. Run the installer and follow the prompts.",
                  "4. After installation, open VS Code.",
                  "5. Go to the Extensions view (Ctrl+Shift+X or Cmd+Shift+X).",
                  "6. Search for 'Java Extension Pack' (published by Microsoft) and click 'Install'. This pack includes Maven, Debugger, Test Runner, etc."
                ],
                "installation_query": "N/A (GUI installer, extension via internal VS Code command)"
              },
              {
                "method_name": "Winget (Windows 10/11)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Winget is installed (usually comes with modern Windows versions or from Microsoft Store).",
                  "2. Open PowerShell or Command Prompt as Administrator.",
                  "3. Install VS Code.",
                  "4. Manually install Java Extension Pack from within VS Code (as above)."
                ],
                "installation_query": "winget install Microsoft.VisualStudioCode"
              },
              {
                "method_name": "Microsoft Store (Windows)",
                "type": "Software Store",
                "instructions": [
                  "1. Open the Microsoft Store application on your Windows PC.",
                  "2. Search for 'Visual Studio Code'.",
                  "3. Click 'Get' or 'Install'.",
                  "4. Manually install Java Extension Pack from within VS Code (as above)."
                ],
                "installation_query": "ms-windows-store://pdp/?ProductId=9NVW4V9X7RCQ"
              },
              {
                "method_name": "Direct Download (macOS - .zip)",
                "type": "Archive Extraction",
                "instructions": [
                  "1. Visit the official VS Code download page: https://code.visualstudio.com/download",
                  "2. Download the **.zip file** for macOS (Intel or Apple Silicon).",
                  "3. Extract the downloaded archive.",
                  "4. Drag `Visual Studio Code.app` to your Applications folder.",
                  "5. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "N/A (GUI installer, extension via internal VS Code command)"
              },
              {
                "method_name": "Homebrew Cask (macOS)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Homebrew is installed.",
                  "2. Install VS Code using Homebrew Cask.",
                  "3. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "brew install --cask visual-studio-code"
              },
              {
                "method_name": "APT (Debian/Ubuntu Linux)",
                "type": "Package Manager",
                "instructions": [
                  "1. Add the Microsoft GPG key:",
                  "   `sudo apt-get install wget apt-transport-https gnupg -y`",
                  "   `wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg`",
                  "   `sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg`",
                  "2. Add the VS Code repository:",
                  "   `echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null`",
                  "3. Update package list and install VS Code:",
                  "   `sudo apt update`",
                  "   `sudo apt install code`",
                  "4. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "sudo apt-get install wget apt-transport-https gnupg -y && wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg && sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null && sudo apt update && sudo apt install code"
              },
              {
                "method_name": "DNF/YUM (Fedora/RHEL Linux)",
                "type": "Package Manager",
                "instructions": [
                  "1. Import Microsoft GPG key:",
                  "   `sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc`",
                  "2. Add the VS Code repository:",
                  "   `sudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/vscode.repo'`",
                  "3. Update package list and install VS Code:",
                  "   `sudo dnf check-update` (or `sudo yum check-update`)",
                  "   `sudo dnf install code` (or `sudo yum install code`)",
                  "4. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc && sudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/vscode.repo' && sudo dnf install code -y"
              },
              {
                "method_name": "Snap (Linux)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Snapd is installed and running.",
                  "2. Install VS Code via Snap or the Snap Store GUI.",
                  "3. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "sudo snap install code --classic"
              },
              {
                "method_name": "Flatpak (Linux)",
                "type": "Package Manager / Software Store",
                "instructions": [
                  "1. Ensure Flatpak is installed and the Flathub remote is added (`flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo`).",
                  "2. Install VS Code via Flatpak.",
                  "3. Manually install Java Extension Pack from within VS Code."
                ],
                "installation_query": "flatpak install flathub com.visualstudio.code"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install Visual Studio Code using Chocolatey."
                ],
                "installation_query": "choco install vscode"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Install Visual Studio Code using Scoop."
                ],
                "installation_query": "scoop install vscode"
              }
            ]
          }
        ]
      },
      {
        "name": "Spring Tool Suite (STS)",
        "publisher": "VMware/Broadcom",
        "description": "An Eclipse-based development environment that provides an extensible tool foundation for building Spring-powered enterprise applications.",
        "versions": [
          {
            "version_name": "Latest Release (e.g., 4.22.0)",
            "release_date": "Regularly updated",
            "supported_oses": ["Windows (x64)", "macOS (Intel, Apple Silicon)", "Linux (x64)"],
            "installation_methods": [
              {
                "method_name": "Direct Download (Installer/Archive)",
                "type": "Executable Installer / Archive Extraction",
                "instructions": [
                  "1. Visit the official Spring Tool Suite download page: https://spring.io/tools/sts/all",
                  "2. Download the appropriate distribution for your OS (e.g., `.zip` for Windows, `.dmg` for macOS, `.tar.gz` for Linux).",
                  "3. **Windows:** Extract the zip file to a directory (e.g., `C:\\sts-4.x.x.RELEASE`). Run `STS.exe` inside the extracted `sts-4.x.x.RELEASE` folder.",
                  "4. **macOS:** Open the `.dmg` file and drag `SpringToolSuite4.app` to your Applications folder.",
                  "5. **Linux:** Extract the `.tar.gz` archive (e.g., `tar -xzf spring-tool-suite-4-*.tar.gz -C /opt/`). Run the `STS` executable from the extracted `sts-4.x.x.RELEASE` directory (e.g., `/opt/sts-4.x.x.RELEASE/STS`).",
                  "6. Ensure a compatible **JDK** (Java 17 or higher recommended) is installed on your system."
                ],
                "installation_query": "N/A (GUI installer/Manual extraction)"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install Spring Tool Suite using Chocolatey."
                ],
                "installation_query": "choco install springtoolsuite"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Add the 'extras' bucket: `scoop bucket add extras` (if not already added).",
                  "4. Install Spring Tool Suite using Scoop."
                ],
                "installation_query": "scoop install springtoolsuite"
              }
            ]
          }
        ]
      },
      {
        "name": "BlueJ",
        "publisher": "King's College London and Deakin University",
        "description": "A free Java development environment designed for beginners, widely used for teaching and learning object-oriented programming. It has a simple, interactive interface.",
        "versions": [
          {
            "version_name": "Latest Stable Release (e.g., 5.3.0)",
            "release_date": "Regularly updated",
            "supported_oses": ["Windows (x64)", "macOS (Intel, Apple Silicon)", "Linux (x64)"],
            "notes": "Includes its own private Java Virtual Machine (JVM), so you don't need a separate JDK installation to run it, but you may need one for compiling projects.",
            "installation_methods": [
              {
                "method_name": "Direct Download (Windows Installer)",
                "type": "Executable Installer",
                "instructions": [
                  "1. Visit the official BlueJ download page: https://www.bluej.org/downloads.html",
                  "2. Download the Windows installer (`.msi` or `.exe`). There are versions with and without bundled JDK.",
                  "3. Run the installer and follow the on-screen instructions."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (macOS Installer)",
                "type": "DMG Installer",
                "instructions": [
                  "1. Visit the official BlueJ download page: https://www.bluej.org/downloads.html",
                  "2. Download the macOS installer (`.dmg`).",
                  "3. Open the .dmg file and drag the BlueJ application to your **Applications** folder."
                ],
                "installation_query": "N/A (GUI installer)"
              },
              {
                "method_name": "Direct Download (Linux - Debian/RedHat Package or Tar.gz)",
                "type": "Package Manager / Archive Extraction",
                "instructions": [
                  "1. Visit the official BlueJ download page: https://www.bluej.org/downloads.html",
                  "2. Download the appropriate Linux package (e.g., `.deb` for Debian/Ubuntu, `.rpm` for Fedora/RedHat) or the `.tar.gz` archive.",
                  "3. **For .deb:** `sudo dpkg -i bluej-*.deb && sudo apt-get install -f`",
                  "4. **For .rpm:** `sudo rpm -i bluej-*.rpm`",
                  "5. **For .tar.gz:** Extract the archive (e.g., `sudo tar -xzf bluej-*.tar.gz -C /opt/`) and run the `bluej` executable inside the extracted directory."
                ],
                "installation_query": "wget https://www.bluej.org/download/files/BlueJ-linux-VERSION.deb -O /tmp/bluej.deb && sudo dpkg -i /tmp/bluej.deb && sudo apt-get install -f"
              },
              {
                "method_name": "Chocolatey (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Chocolatey is installed.",
                  "2. Open an elevated PowerShell or Command Prompt.",
                  "3. Install BlueJ using Chocolatey."
                ],
                "installation_query": "choco install bluej"
              },
              {
                "method_name": "Scoop (Windows)",
                "type": "Package Manager",
                "instructions": [
                  "1. Ensure Scoop is installed.",
                  "2. Open PowerShell.",
                  "3. Add the 'extras' bucket: `scoop bucket add extras` (if not already added).",
                  "4. Install BlueJ using Scoop."
                ],
                "installation_query": "scoop install bluej"
              }
            ]
          }
        ]
      }
    ],
      "jre": [
    {
      "name": "Java Runtime Environment (JRE)",
      "publisher": "Oracle Corporation (and various OpenJDK vendors like Adoptium, Azul, Red Hat, Amazon)",
      "description": "The Java Runtime Environment (JRE) is a software package that contains the minimum requirements for executing a Java application. It consists of the Java Virtual Machine (JVM), core classes, and supporting files. While a JDK (Java Development Kit) is needed for development, the JRE is sufficient for simply running compiled Java programs.",
      "versions": [
        {
          "version_name": "JRE 21 (LTS - Long Term Support)",
          "release_date": "September 2023",
          "supported_oses": ["Linux", "Windows", "macOS"],
          "notes": "Current LTS release. Recommended for new applications and production environments for long-term stability and support. Requires modern operating systems. Oracle JRE distributions may have commercial use restrictions; OpenJDK distributions are generally free to use. GitHub (OpenJDK): https://github.com/openjdk/jdk21",
          "components": [
            {
              "component_name": "JRE (Runtime Environment)",
              "notes": "The runtime environment itself, providing the JVM and necessary libraries to execute Java applications.",
              "installation_methods": [
                {
                  "method_name": "OpenJDK (Adoptium Temurin Distribution - Recommended)",
                  "type": "Executable Installer / Package Manager",
                  "instructions": [
                    "1. Visit Adoptium downloads: https://adoptium.net/temurin/releases/",
                    "2. Select 'JDK 21' and choose 'JRE' (if available as a separate download, otherwise JDK includes JRE). Download the installer for your OS (e.g., `.msi` for Windows, `.pkg` for macOS, `.deb`/`.rpm` for Linux).",
                    "3. Run the installer and follow the prompts. The installer typically sets up system `PATH` and `JAVA_HOME`.",
                    "4. Verify installation: `java -version` (should show 'Eclipse Adoptium' or 'Temurin')."
                  ],
                  "installation_query": "N/A (GUI installer, or refer to Adoptium site for specific package manager instructions)"
                },
                {
                  "method_name": "SDKMAN! (Linux/macOS - Recommended for multiple Java versions)",
                  "type": "Version Manager",
                  "instructions": [
                    "1. Install SDKMAN!: `curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\"`",
                    "2. List available JREs: `sdk list java`",
                    "3. Install a specific JRE (e.g., Temurin 21 JRE): `sdk install java 21.0.3-tem` (Check `sdk list java` for exact identifier for JRE if separate from JDK). If no separate JRE, install the JDK.",
                    "4. Set as default: `sdk default java 21.0.3-tem`",
                    "5. Verify: `java -version`"
                  ],
                  "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 21.0.3-tem && sdk default java 21.0.3-tem"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Chocolatey is installed.",
                    "2. Install OpenJDK 21 (Temurin) which includes the JRE: `choco install temurin21-jre -y` (or `temurin21-jdk` if JRE-only package isn't preferred or available).",
                    "3. Verify: `java -version`"
                  ],
                  "installation_query": "choco install temurin21-jre -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Scoop is installed.",
                    "2. Add the 'java' bucket: `scoop bucket add java`",
                    "3. Install OpenJDK 21 JRE: `scoop install temurin-21-jre` (or `temurin-21-jdk` if JRE-only is not explicitly required).",
                    "4. Verify: `java -version`"
                  ],
                  "installation_query": "scoop bucket add java && scoop install temurin-21-jre"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Add Adoptium repository (for Temurin JRE, if default is not desired): `sudo apt update && sudo apt install -y curl apt-transport-https && curl -fsSL https://packages.adoptium.net/artifactory/api/apt/key | sudo gpg --dearmor -o /usr/share/keyrings/adoptium.gpg && echo \"deb [signed-by=/usr/share/keyrings/adoptium.gpg] https://packages.adoptium.net/artifactory/deb $(awk -F= '/VERSION_CODENAME/{print $2}' /etc/os-release) main\" | sudo tee /etc/apt/sources.list.d/adoptium.list`",
                    "2. Update package lists: `sudo apt update`",
                    "3. Install the JRE: `sudo apt install temurin-21-jre -y`",
                    "4. Set as default (if multiple JREs): `sudo update-alternatives --config java`",
                    "5. Verify: `java -version`"
                  ],
                  "installation_query": "sudo apt update && sudo apt install -y curl apt-transport-https && curl -fsSL https://packages.adoptium.net/artifactory/api/apt/key | sudo gpg --dearmor -o /usr/share/keyrings/adoptium.gpg && echo \"deb [signed-by=/usr/share/keyrings/adoptium.gpg] https://packages.adoptium.net/artifactory/deb $(awk -F= '/VERSION_CODENAME/{print $2}' /etc/os-release) main\" | sudo tee /etc/apt/sources.list.d/adoptium.list && sudo apt update && sudo apt install temurin-21-jre -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install Java 21 JRE (e.g., from default repos or Adoptium/Red Hat): `sudo dnf install java-21-openjdk-headless -y` (headless for server environments without GUI).",
                    "2. Verify: `java -version`"
                  ],
                  "installation_query": "sudo dnf install java-21-openjdk-headless -y"
                },
                {
                  "method_name": "Docker Image",
                  "type": "Container Image",
                  "notes": "For running Java applications in containers. Often based on slim or 'JRE-only' images.",
                  "instructions": [
                    "1. Pull a JRE image: `docker pull eclipse-temurin:21-jre-jammy` (or another base image)",
                    "2. Use this image as the base for your application's Dockerfile: `FROM eclipse-temurin:21-jre-jammy`",
                    "3. Example run: `docker run --rm eclipse-temurin:21-jre-jammy java -version`"
                  ],
                  "installation_query": "docker pull eclipse-temurin:21-jre-jammy"
                }
              ]
            }
          ]
        },
        {
          "version_name": "JRE 17 (LTS - Long Term Support)",
          "release_date": "September 2021",
          "supported_oses": ["Linux", "Windows", "macOS"],
          "notes": "Previous LTS release, still widely used and supported. Compatible with many existing Java applications. GitHub (OpenJDK): https://github.com/openjdk/jdk17",
          "components": [
            {
              "component_name": "JRE (Runtime Environment)",
              "notes": "The runtime environment itself, providing the JVM and necessary libraries.",
              "installation_methods": [
                {
                  "method_name": "OpenJDK (Adoptium Temurin Distribution - Recommended)",
                  "type": "Executable Installer / Package Manager",
                  "instructions": [
                    "1. Visit Adoptium downloads: https://adoptium.net/temurin/releases/",
                    "2. Select 'JDK 17' and choose 'JRE' (if available, otherwise JDK includes JRE). Download the installer.",
                    "3. Run the installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer, or Adoptium site for specific package manager instructions)"
                },
                {
                  "method_name": "SDKMAN! (Linux/macOS)",
                  "type": "Version Manager",
                  "instructions": [
                    "1. `sdk install java 17.0.11-tem` (Check `sdk list java` for exact identifier for JRE if separate from JDK).",
                    "2. `sdk default java 17.0.11-tem`"
                  ],
                  "installation_query": "sdk install java 17.0.11-tem && sdk default java 17.0.11-tem"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install temurin17-jre -y`"
                  ],
                  "installation_query": "choco install temurin17-jre -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `scoop install temurin-17-jre`"
                  ],
                  "installation_query": "scoop install temurin-17-jre"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Similar to JRE 21, but install `temurin-17-jre`.",
                    "2. `sudo apt install temurin-17-jre -y`"
                  ],
                  "installation_query": "sudo apt install temurin-17-jre -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo dnf install java-17-openjdk-headless -y`"
                  ],
                  "installation_query": "sudo dnf install java-17-openjdk-headless -y"
                },
                {
                  "method_name": "Docker Image",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull eclipse-temurin:17-jre-jammy`"
                  ],
                  "installation_query": "docker pull eclipse-temurin:17-jre-jammy"
                }
              ]
            }
          ]
        },
        {
          "version_name": "JRE 8 (LTS - Legacy Long Term Support)",
          "release_date": "March 2014 (Initial Release), continues to receive updates",
          "supported_oses": ["Linux", "Windows", "macOS"],
          "notes": "A very common legacy LTS release. Many older applications and systems still rely on Java 8. For commercial use, Oracle JRE 8 updates generally require a license. OpenJDK 8 distributions (e.g., Adoptium) are free to use. GitHub (OpenJDK): https://github.com/openjdk/jdk8u",
          "components": [
            {
              "component_name": "JRE (Runtime Environment)",
              "notes": "The runtime environment for older Java applications.",
              "installation_methods": [
                {
                  "method_name": "OpenJDK (Adoptium Temurin Distribution - Recommended for free use)",
                  "type": "Executable Installer / Package Manager",
                  "instructions": [
                    "1. Visit Adoptium downloads: https://adoptium.net/temurin/releases/",
                    "2. Select 'JDK 8' and choose 'JRE' (if available, otherwise JDK includes JRE). Download the installer.",
                    "3. Run the installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer, or Adoptium site for specific package manager instructions)"
                },
                {
                  "method_name": "SDKMAN! (Linux/macOS)",
                  "type": "Version Manager",
                  "instructions": [
                    "1. `sdk install java 8.0.412-tem` (Check `sdk list java` for exact identifier).",
                    "2. `sdk default java 8.0.412-tem`"
                  ],
                  "installation_query": "sdk install java 8.0.412-tem && sdk default java 8.0.412-tem"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install temurin8-jre -y`"
                  ],
                  "installation_query": "choco install temurin8-jre -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `scoop install temurin-8-jre`"
                  ],
                  "installation_query": "scoop install temurin-8-jre"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Similar to newer JREs, but install `temurin-8-jre`.",
                    "2. `sudo apt install temurin-8-jre -y`"
                  ],
                  "installation_query": "sudo apt install temurin-8-jre -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo dnf install java-1.8.0-openjdk-headless -y`"
                  ],
                  "installation_query": "sudo dnf install java-1.8.0-openjdk-headless -y"
                },
                {
                  "method_name": "Docker Image",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull eclipse-temurin:8-jre-jammy`"
                  ],
                  "installation_query": "docker pull eclipse-temurin:8-jre-jammy"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
   "JDKs": [
    {
      "name": "OpenJDK (Various Distributions)",
      "publisher": "Various (Eclipse Adoptium, Oracle, Azul Zulu, Amazon Corretto, Red Hat, BellSoft Liberica, SapMachine, Microsoft OpenJDK, GraalVM Community Edition, etc.)",
      "description": "The open-source implementation of the Java SE Platform, providing the Java Development Kit (JDK) and Java Runtime Environment (JRE). Essential for compiling and running Java applications. Different distributions offer varying support, release cycles, and optimizations.",
      "versions": [
        {
          "version_name": "JDK 22 (Latest Short-Term Release)",
          "release_date": "March 2024",
          "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)", "Alpine Linux (musl)", "FreeBSD", "Solaris"],
          "notes": "Short-term support release. For development and testing of new features. Oracle OpenJDK builds are available from jdk.java.net. Eclipse Temurin (Adoptium) is a popular choice for production-ready builds. ARM64 support is crucial for Apple Silicon Macs and ARM-based Linux servers/devices.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install **SDKMAN!** if you haven't already (requires curl and zip/unzip): `curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\"`",
                "2. List available JDKs: `sdk list java` (This will show many vendors like tem, zulu, corretto, oracle, ms, grl, etc.)",
                "3. Install a specific JDK (e.g., Temurin 22): `sdk install java 22.0.1-tem` (replace version and identifier as needed. Use `sdk default java <identifier>` to set as default).",
                "4. Install a specific JDK (e.g., Oracle OpenJDK 22 - non-distro): `sdk install java 22-oracle`",
                "5. Install a specific JDK (e.g., Zulu 22): `sdk install java 22.0.1-zulu`",
                "6. Install GraalVM CE 22: `sdk install java 22-graal`",
                "7. Verify: `java -version`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 22.0.1-tem && sdk default java 22.0.1-tem"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Windows)",
              "type": "MSI Installer / ZIP Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 22', 'Windows', 'x64' or 'ARM64', 'MSI' (recommended) or 'ZIP' and download.",
                "3. **MSI:** Run the MSI installer and follow the prompts. This will typically set `JAVA_HOME` and update `PATH` automatically.",
                "4. **ZIP:** Extract the contents of the ZIP to a directory (e.g., `C:\\Program Files\\Java\\jdk-22`). Manually set `JAVA_HOME` to this directory and add `%JAVA_HOME%\\bin` to your system `PATH`."
              ],
              "installation_query": "N/A (GUI installer for MSI, for ZIP: Invoke-WebRequest -Uri 'https://adoptium.net/download/jdk/temurin22-hotspot/windows/x64/latest.zip' -OutFile 'temurin22.zip' ; Expand-Archive -Path 'temurin22.zip' -DestinationPath 'C:\\Program Files\\Java')"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - macOS)",
              "type": "PKG Installer / Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 22', 'macOS', 'x64' (Intel) or 'AArch64' (Apple Silicon), 'PKG' (recommended) or 'Tar.gz' and download.",
                "3. **PKG:** Run the PKG installer and follow the prompts. This will install JDK to `/Library/Java/JavaVirtualMachines/`.",
                "4. **Tar.gz:** Extract the archive: `sudo tar -xzf <downloaded_file>.tar.gz -C /Library/Java/JavaVirtualMachines/` (adjust path if needed). Manually set `JAVA_HOME` and `PATH` in your shell profile (e.g., `~/.zshrc`)."
              ],
              "installation_query": "N/A (GUI installer for PKG, for Tar.gz: wget https://adoptium.net/download/jdk/temurin22-hotspot/mac/aarch64/latest.tar.gz -O /tmp/temurin22.tar.gz && sudo tar -xzf /tmp/temurin22.tar.gz -C /Library/Java/JavaVirtualMachines/)"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Linux)",
              "type": "Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 22', 'Linux', 'x64' or 'AArch64', 'Tar.gz' and download.",
                "3. Create a directory for JDKs: `sudo mkdir -p /usr/lib/jvm`",
                "4. Extract the archive: `sudo tar -xzf <downloaded_file>.tar.gz -C /usr/lib/jvm/`",
                "5. Create a symbolic link (optional, for easier management): `sudo ln -s /usr/lib/jvm/jdk-<version> /usr/lib/jvm/java-22-temurin`",
                "6. Set `JAVA_HOME` and update `PATH` in your shell profile (e.g., `~/.bashrc`, `~/.zshrc`, `~/.profile` for system-wide):",
                "   `export JAVA_HOME=/usr/lib/jvm/java-22-temurin`",
                "   `export PATH=$JAVA_HOME/bin:$PATH`",
                "7. Apply changes: `source ~/.bashrc` (or `source ~/.zshrc`)."
              ],
              "installation_query": "wget https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.1%2B8/OpenJDK22U-jdk_x64_linux_hotspot_22.0.1_8.tar.gz -O /tmp/temurin22.tar.gz && sudo mkdir -p /usr/lib/jvm && sudo tar -xzf /tmp/temurin22.tar.gz -C /usr/lib/jvm/ && echo 'export JAVA_HOME=/usr/lib/jvm/jdk-22.0.1+8' >> ~/.bashrc && echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Zulu/Corretto/Liberica via PPA/Repository)",
              "type": "Package Manager",
              "notes": "Direct `openjdk-22-jdk` might not be available directly in all Ubuntu/Debian versions' default repos at release. Using a PPA (like Zulu) or AWS Corretto repository is common for specific OpenJDK builds. Always replace `jammy` with your actual Ubuntu version if different.",
              "instructions": [
                "**For Zulu OpenJDK:**",
                "1. Install `apt-transport-https` and `gnupg`: `sudo apt update && sudo apt install apt-transport-https gnupg -y`",
                "2. Add Azul's GPG key: `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB199836F219BD9C9` (Note: `apt-key` is deprecated, using it for older instructions. For newer, see Azul docs.)",
                "3. Add Azul's repository: `echo 'deb http://repos.azul.com/zulu/deb stable main' | sudo tee /etc/apt/sources.list.d/zulu.list`",
                "4. Update and install: `sudo apt update && sudo apt install zulu-22-jdk`",
                "**For Amazon Corretto:** (Replace `jammy` with your Ubuntu version, e.g., `focal`, `noble`):",
                "1. Import GPG key: `wget -O - https://apt.corretto.aws/corretto.key | sudo apt-key add -`",
                "2. Add Corretto repository: `sudo add-apt-repository 'deb https://apt.corretto.aws jammy main'`",
                "3. Update and install: `sudo apt update && sudo apt install java-22-amazon-corretto-jdk`"
              ],
              "installation_query": "sudo apt update && sudo apt install apt-transport-https gnupg -y && sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB199836F219BD9C9 && echo 'deb http://repos.azul.com/zulu/deb stable main' | sudo tee /etc/apt/sources.list.d/zulu.list && sudo apt update && sudo apt install zulu-22-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Default OpenJDK / Corretto / Liberica)",
              "type": "Package Manager",
              "notes": "Fedora typically has the latest OpenJDK directly in its repositories. Red Hat provides OpenJDK builds as well.",
              "instructions": [
                "**For default OpenJDK (Fedora):**",
                "1. Install: `sudo dnf install java-latest-openjdk-devel`",
                "**For Amazon Corretto (RHEL/CentOS 8/9, Fedora):**",
                "1. Import GPG key: `sudo rpm --import https://yum.corretto.aws/corretto.key`",
                "2. Add Corretto repository: `sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo`",
                "3. Install: `sudo dnf install java-22-amazon-corretto-devel`",
                "**For BellSoft Liberica JDK (RHEL/CentOS):**",
                "1. Import GPG key: `sudo rpm --import https://download.bell-sw.com/pki/GPG-KEY-bellsoft`",
                "2. Add Liberica repository: `sudo curl -L -o /etc/yum.repos.d/bellsoft.repo https://download.bell-sw.com/pki/bellsoft.repo`",
                "3. Install: `sudo dnf install bellsoft-java22-devel`"
              ],
              "installation_query": "sudo dnf install java-latest-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Install the desired OpenJDK version:",
                "   `sudo pacman -S jdk22-openjdk`",
                "2. Manage default Java environment (if multiple JDKs exist):",
                "   `sudo archlinux-java set java-22-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk22-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Tap the Homebrew Caskroom for Java (if not already):",
                "   `brew tap homebrew/cask-versions`",
                "3. Install a specific JDK (e.g., Temurin 22): `brew install --cask temurin22`",
                "4. Install other distributions: `brew install --cask zulu22`, `brew install --cask corretto22`, `brew install --cask liberica22`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin22"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. Ensure Winget is installed.",
                "2. Open PowerShell or Command Prompt as Administrator.",
                "3. Install Adoptium Temurin 22:",
                "   `winget install EclipseAdoptium.Temurin.22.JDK`",
                "4. Install Microsoft OpenJDK 22:",
                "   `winget install Microsoft.OpenJDK.22`",
                "5. Install Azul Zulu 22:",
                "   `winget install Azul.Zulu.22.JDK`",
                "6. Install BellSoft Liberica 22:",
                "   `winget install BellSoft.Liberica.22.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.22.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey: `Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))`",
                "2. Install AdoptOpenJDK (legacy, now Temurin): `choco install adoptopenjdk --version=22.0.1`",
                "3. Install Zulu: `choco install zulu-jdk --version=22.0.1`",
                "4. Install Liberica: `choco install liberica-jdk-full --version=22.0.1`"
              ],
              "installation_query": "choco install adoptopenjdk --version=22.0.1"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 22): `scoop install temurin22-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk22`",
                "   `scoop install zulu22-jdk`",
                "   `scoop install corretto22-jdk`",
                "   `scoop install liberica22-full-jdk`",
                "   `scoop install graalvm-ce-java22`",
                "   `scoop install sapmachine22-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin22-jdk"
            }
          ]
        },
        {
          "version_name": "JDK 17 (Latest LTS - Long-Term Support)",
          "release_date": "September 2021",
          "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)", "Alpine Linux (musl)", "FreeBSD", "Solaris"],
          "notes": "Recommended for most production environments due to long-term support and stability. A very common choice.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install SDKMAN! (if not already): `curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\"`",
                "2. List available JDKs: `sdk list java`",
                "3. Install a specific JDK (e.g., Temurin 17): `sdk install java 17.0.11-tem` (replace version and identifier).",
                "4. Install Oracle OpenJDK 17: `sdk install java 17-oracle`",
                "5. Install Azul Zulu 17: `sdk install java 17.0.11-zulu`",
                "6. Set as default (optional): `sdk default java 17.0.11-tem`",
                "7. Verify: `java -version`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 17.0.11-tem && sdk default java 17.0.11-tem"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Windows)",
              "type": "MSI Installer / ZIP Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 17', 'Windows', 'x64' or 'ARM64', 'MSI' or 'ZIP' and download.",
                "3. **MSI:** Run the MSI installer. Sets `JAVA_HOME` and `PATH`.",
                "4. **ZIP:** Extract and manually configure `JAVA_HOME` and `PATH`."
              ],
              "installation_query": "N/A (GUI installer for MSI, for ZIP: Invoke-WebRequest -Uri 'https://adoptium.net/download/jdk/temurin17-hotspot/windows/x64/latest.zip' -OutFile 'temurin17.zip' ; Expand-Archive -Path 'temurin17.zip' -DestinationPath 'C:\\Program Files\\Java')"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - macOS)",
              "type": "PKG Installer / Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 17', 'macOS', 'x64' or 'AArch64', 'PKG' or 'Tar.gz' and download.",
                "3. **PKG:** Run the PKG installer. Installs to `/Library/Java/JavaVirtualMachines/`.",
                "4. **Tar.gz:** Extract and manually configure `JAVA_HOME` and `PATH`."
              ],
              "installation_query": "N/A (GUI installer for PKG, for Tar.gz: wget https://adoptium.net/download/jdk/temurin17-hotspot/mac/aarch64/latest.tar.gz -O /tmp/temurin17.tar.gz && sudo tar -xzf /tmp/temurin17.tar.gz -C /Library/Java/JavaVirtualMachines/)"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Linux)",
              "type": "Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 17', 'Linux', 'x64' or 'AArch64', 'Tar.gz' and download.",
                "3. Create JDK directory: `sudo mkdir -p /usr/lib/jvm`",
                "4. Extract: `sudo tar -xzf <downloaded_file>.tar.gz -C /usr/lib/jvm/`",
                "5. Create symlink: `sudo ln -s /usr/lib/jvm/jdk-<version> /usr/lib/jvm/java-17-temurin`",
                "6. Set `JAVA_HOME` and update `PATH` in `~/.bashrc` / `~/.zshrc` / `~/.profile`:",
                "   `export JAVA_HOME=/usr/lib/jvm/java-17-temurin`",
                "   `export PATH=$JAVA_HOME/bin:$PATH`",
                "7. Apply changes: `source ~/.bashrc`."
              ],
              "installation_query": "wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.11_9.tar.gz -O /tmp/temurin17.tar.gz && sudo mkdir -p /usr/lib/jvm && sudo tar -xzf /tmp/temurin17.tar.gz -C /usr/lib/jvm/ && echo 'export JAVA_HOME=/usr/lib/jvm/jdk-17.0.11+9' >> ~/.bashrc && echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Official/Corretto/Zulu/Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK (Ubuntu 22.04+):** `sudo apt update && sudo apt install openjdk-17-jdk`",
                "**For Amazon Corretto:** (Replace `jammy` with your Ubuntu version, e.g., `noble` for 24.04):",
                "1. `wget -O - https://apt.corretto.aws/corretto.key | sudo apt-key add -`",
                "2. `sudo add-apt-repository 'deb https://apt.corretto.aws jammy main'`",
                "3. `sudo apt update && sudo apt install java-17-amazon-corretto-jdk`",
                "**For Zulu OpenJDK:**",
                "1. `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB199836F219BD9C9` (For newer, see Azul docs for direct key import)",
                "2. `echo 'deb http://repos.azul.com/zulu/deb stable main' | sudo tee /etc/apt/sources.list.d/zulu.list`",
                "3. `sudo apt update && sudo apt install zulu-17-jdk`",
                "**For BellSoft Liberica JDK:**",
                "1. `wget -q -O - https://download.bell-sw.com/pki/GPG-KEY-bellsoft | sudo apt-key add -`",
                "2. `echo \"deb [arch=amd64] https://bell-sw.com/maven/release/debian stable main\" | sudo tee /etc/apt/sources.list.d/bellsoft.list`",
                "3. `sudo apt update && sudo apt install bellsoft-java17-jdk`"
              ],
              "installation_query": "sudo apt update && sudo apt install openjdk-17-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Official / Corretto / Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK (RHEL/Centos/Fedora):** `sudo dnf install java-17-openjdk-devel`",
                "**For Amazon Corretto:** (similar to JDK 22, just change version in command)",
                "1. `sudo rpm --import https://yum.corretto.aws/corretto.key`",
                "2. `sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo`",
                "3. `sudo dnf install java-17-amazon-corretto-devel`",
                "**For BellSoft Liberica JDK:** (similar to JDK 22, just change version in command)",
                "1. `sudo rpm --import https://download.bell-sw.com/pki/GPG-KEY-bellsoft`",
                "2. `sudo curl -L -o /etc/yum.repos.d/bellsoft.repo https://download.bell-sw.com/pki/bellsoft.repo`",
                "3. `sudo dnf install bellsoft-java17-devel`"
              ],
              "installation_query": "sudo dnf install java-17-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S jdk17-openjdk`",
                "2. `sudo archlinux-java set java-17-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk17-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `brew tap homebrew/cask-versions`",
                "2. `brew install --cask temurin17`",
                "3. `brew install --cask zulu17`, `brew install --cask corretto17`, `brew install --cask liberica17`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin17"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `winget install EclipseAdoptium.Temurin.17.JDK`",
                "2. `winget install Microsoft.OpenJDK.17`",
                "3. `winget install Azul.Zulu.17.JDK`",
                "4. `winget install BellSoft.Liberica.17.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.17.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. `choco install adoptopenjdk --version=17.0.11` (or latest 17.x)",
                "3. `choco install zulu-jdk --version=17.0.11`",
                "4. `choco install liberica-jdk-full --version=17.0.11`"
              ],
              "installation_query": "choco install adoptopenjdk --version=17.0.11"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 17): `scoop install temurin17-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk17`",
                "   `scoop install zulu17-jdk`",
                "   `scoop install corretto17-jdk`",
                "   `scoop install liberica17-full-jdk`",
                "   `scoop install graalvm-ce-java17`",
                "   `scoop install sapmachine17-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin17-jdk"
            }
          ]
        },
        {
          "version_name": "JDK 11 (Previous LTS)",
          "release_date": "September 2018",
          "supported_oses": ["Windows (x64)", "macOS (Intel - via Rosetta on Apple Silicon)", "Linux (x64)"],
          "notes": "Still widely used, especially for older enterprise applications and Android development. For Apple Silicon Macs, JDK 11 Intel builds typically run via Rosetta 2.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install SDKMAN! (if not already).",
                "2. `sdk install java 11.0.23-tem` (or `11.0.23-zulu`, `11.0.23-librca`, `11-oracle`, etc.)",
                "3. `sdk default java 11.0.23-tem`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 11.0.23-tem && sdk default java 11.0.23-tem"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Official/Corretto/Zulu/Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo apt update && sudo apt install openjdk-11-jdk`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 11)",
                "**For Zulu OpenJDK:** (similar to JDK 17, just change version to 11)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 11)"
              ],
              "installation_query": "sudo apt update && sudo apt install openjdk-11-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Official / Corretto / Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo dnf install java-11-openjdk-devel`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 11)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 11)"
              ],
              "installation_query": "sudo dnf install java-11-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S jdk11-openjdk`",
                "2. `sudo archlinux-java set java-11-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk11-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `brew tap homebrew/cask-versions`",
                "2. `brew install --cask temurin11`",
                "3. `brew install --cask zulu11`, `brew install --cask corretto11`, `brew install --cask liberica11`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin11"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `winget install EclipseAdoptium.Temurin.11.JDK`",
                "2. `winget install Microsoft.OpenJDK.11`",
                "3. `winget install Azul.Zulu.11.JDK`",
                "4. `winget install BellSoft.Liberica.11.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.11.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. `choco install adoptopenjdk --version=11.0.23` (or latest 11.x)",
                "3. `choco install zulu-jdk --version=11.0.23`",
                "4. `choco install liberica-jdk-full --version=11.0.23`"
              ],
              "installation_query": "choco install adoptopenjdk --version=11.0.23"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 11): `scoop install temurin11-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk11`",
                "   `scoop install zulu11-jdk`",
                "   `scoop install corretto11-jdk`",
                "   `scoop install liberica11-full-jdk`",
                "   `scoop install graalvm-ce-java11`",
                "   `scoop install sapmachine11-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin11-jdk"
            }
          ]
        },
        {
          "version_name": "JDK 8 (Legacy LTS)",
          "release_date": "March 2014",
          "supported_oses": ["Windows (x64)", "macOS (Intel)", "Linux (x64)"],
          "notes": "Still used for very old enterprise applications. Note that public updates for Oracle JDK 8 require a commercial license for production use. OpenJDK 8 builds (e.g., Temurin, Zulu) provide free alternatives.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install SDKMAN! (if not already).",
                "2. `sdk install java 8.0.412-tem` (or `8.0.412-zulu`, etc.)",
                "3. `sdk default java 8.0.412-tem`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 8.0.412-tem && sdk default java 8.0.412-tem"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Official/Corretto/Zulu/Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo apt update && sudo apt install openjdk-8-jdk`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 8)",
                "**For Zulu OpenJDK:** (similar to JDK 17, just change version to 8)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 8)"
              ],
              "installation_query": "sudo apt update && sudo apt install openjdk-8-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Official / Corretto / Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo dnf install java-1.8.0-openjdk-devel`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 8)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 8)"
              ],
              "installation_query": "sudo dnf install java-1.8.0-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S jdk8-openjdk`",
                "2. `sudo archlinux-java set java-8-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk8-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `brew tap homebrew/cask-versions`",
                "2. `brew install --cask temurin8`",
                "3. `brew install --cask zulu8`, `brew install --cask corretto8`, `brew install --cask liberica8`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin8"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `winget install EclipseAdoptium.Temurin.8.JDK`",
                "2. `winget install Microsoft.OpenJDK.8`",
                "3. `winget install Azul.Zulu.8.JDK`",
                "4. `winget install BellSoft.Liberica.8.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.8.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. `choco install adoptopenjdk --version=8.0.412` (or latest 8.x)",
                "3. `choco install zulu-jdk --version=8.0.412`",
                "4. `choco install liberica-jdk-full --version=8.0.412`"
              ],
              "installation_query": "choco install adoptopenjdk --version=8.0.412"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 8): `scoop install temurin8-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk8`",
                "   `scoop install zulu8-jdk`",
                "   `scoop install corretto8-jdk`",
                "   `scoop install liberica8-full-jdk`",
                "   `scoop install graalvm-ce-java8`",
                "   `scoop install sapmachine8-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin8-jdk"
            }
          ]
        },
        {
          "version_name": "JDK 21 (LTS - Latest)",
          "release_date": "September 2023",
          "supported_oses": ["Windows (x64, ARM64)", "macOS (Intel, Apple Silicon)", "Linux (x64, ARM64)", "Alpine Linux (musl)"],
          "notes": "Latest Long-Term Support release, offering stability and new features. Recommended for new projects requiring LTS.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install SDKMAN! (if not already).",
                "2. `sdk install java 21.0.3-tem` (or `21.0.3-zulu`, `21-oracle`, `21-graal`, etc.)",
                "3. `sdk default java 21.0.3-tem`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 21.0.3-tem && sdk default java 21.0.3-tem"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Windows)",
              "type": "MSI Installer / ZIP Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 21', 'Windows', 'x64' or 'ARM64', 'MSI' or 'ZIP' and download.",
                "3. **MSI:** Run the MSI installer. Sets `JAVA_HOME` and `PATH`.",
                "4. **ZIP:** Extract and manually configure `JAVA_HOME` and `PATH`."
              ],
              "installation_query": "N/A (GUI installer for MSI, for ZIP: Invoke-WebRequest -Uri 'https://adoptium.net/download/jdk/temurin21-hotspot/windows/x64/latest.zip' -OutFile 'temurin21.zip' ; Expand-Archive -Path 'temurin21.zip' -DestinationPath 'C:\\Program Files\\Java')"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - macOS)",
              "type": "PKG Installer / Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 21', 'macOS', 'x64' or 'AArch64', 'PKG' or 'Tar.gz' and download.",
                "3. **PKG:** Run the PKG installer. Installs to `/Library/Java/JavaVirtualMachines/`.",
                "4. **Tar.gz:** Extract and manually configure `JAVA_HOME` and `PATH`."
              ],
              "installation_query": "N/A (GUI installer for PKG, for Tar.gz: wget https://adoptium.net/download/jdk/temurin21-hotspot/mac/aarch64/latest.tar.gz -O /tmp/temurin21.tar.gz && sudo tar -xzf /tmp/temurin21.tar.gz -C /Library/Java/JavaVirtualMachines/)"
            },
            {
              "method_name": "Direct Download (Adoptium Temurin - Linux)",
              "type": "Tar.gz Archive",
              "instructions": [
                "1. Visit Adoptium Downloads: https://adoptium.net/temurin/releases/",
                "2. Select 'JDK 21', 'Linux', 'x64' or 'AArch64', 'Tar.gz' and download.",
                "3. Create JDK directory: `sudo mkdir -p /usr/lib/jvm`",
                "4. Extract: `sudo tar -xzf <downloaded_file>.tar.gz -C /usr/lib/jvm/`",
                "5. Create symlink: `sudo ln -s /usr/lib/jvm/jdk-<version> /usr/lib/jvm/java-21-temurin`",
                "6. Set `JAVA_HOME` and update `PATH` in `~/.bashrc` / `~/.zshrc` / `~/.profile`.",
                "7. Apply changes: `source ~/.bashrc`."
              ],
              "installation_query": "wget https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.3%2B9/OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz -O /tmp/temurin21.tar.gz && sudo mkdir -p /usr/lib/jvm && sudo tar -xzf /tmp/temurin21.tar.gz -C /usr/lib/jvm/ && echo 'export JAVA_HOME=/usr/lib/jvm/jdk-21.0.3+9' >> ~/.bashrc && echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Official/Corretto/Zulu/Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK (Ubuntu 23.10+):** `sudo apt update && sudo apt install openjdk-21-jdk`",
                "**For Amazon Corretto:** (Replace `jammy` with your Ubuntu version):",
                "1. `wget -O - https://apt.corretto.aws/corretto.key | sudo apt-key add -`",
                "2. `sudo add-apt-repository 'deb https://apt.corretto.aws jammy main'`",
                "3. `sudo apt update && sudo apt install java-21-amazon-corretto-jdk`",
                "**For Zulu OpenJDK:**",
                "1. `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB199836F219BD9C9`",
                "2. `echo 'deb http://repos.azul.com/zulu/deb stable main' | sudo tee /etc/apt/sources.list.d/zulu.list`",
                "3. `sudo apt update && sudo apt install zulu-21-jdk`",
                "**For BellSoft Liberica JDK:**",
                "1. `wget -q -O - https://download.bell-sw.com/pki/GPG-KEY-bellsoft | sudo apt-key add -`",
                "2. `echo \"deb [arch=amd64] https://bell-sw.com/maven/release/debian stable main\" | sudo tee /etc/apt/sources.list.d/bellsoft.list`",
                "3. `sudo apt update && sudo apt install bellsoft-java21-jdk`"
              ],
              "installation_query": "sudo apt update && sudo apt install openjdk-21-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Official / Corretto / Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK (RHEL/Centos/Fedora):** `sudo dnf install java-21-openjdk-devel`",
                "**For Amazon Corretto:** (similar to JDK 22, just change version to 21)",
                "**For BellSoft Liberica JDK:** (similar to JDK 22, just change version to 21)"
              ],
              "installation_query": "sudo dnf install java-21-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S jdk21-openjdk`",
                "2. `sudo archlinux-java set java-21-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk21-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `brew tap homebrew/cask-versions`",
                "2. `brew install --cask temurin21`",
                "3. `brew install --cask zulu21`, `brew install --cask corretto21`, `brew install --cask liberica21`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin21"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `winget install EclipseAdoptium.Temurin.21.JDK`",
                "2. `winget install Microsoft.OpenJDK.21`",
                "3. `winget install Azul.Zulu.21.JDK`",
                "4. `winget install BellSoft.Liberica.21.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.21.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. `choco install adoptopenjdk --version=21.0.3` (or latest 21.x)",
                "3. `choco install zulu-jdk --version=21.0.3`",
                "4. `choco install liberica-jdk-full --version=21.0.3`"
              ],
              "installation_query": "choco install adoptopenjdk --version=21.0.3"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 21): `scoop install temurin21-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk21`",
                "   `scoop install zulu21-jdk`",
                "   `scoop install corretto21-jdk`",
                "   `scoop install liberica21-full-jdk`",
                "   `scoop install graalvm-ce-java21`",
                "   `scoop install sapmachine21-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin21-jdk"
            }
          ]
        },
        {
          "version_name": "JDK 1.8 / Java 8 (Legacy LTS)",
          "release_date": "March 2014",
          "supported_oses": ["Windows (x64)", "macOS (Intel)", "Linux (x64)"],
          "notes": "Still widely used for older enterprise applications. Note that public updates for Oracle JDK 8 require a commercial license for production use. OpenJDK 8 builds (e.g., Temurin, Zulu) provide free alternatives.",
          "installation_methods": [
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL/Cygwin/MSYS2)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install SDKMAN! (if not already).",
                "2. `sdk install java 8.0.412-tem` (or `8.0.412-zulu`, etc.)",
                "3. `sdk default java 8.0.412-tem`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install java 8.0.412-tem && sdk default java 8.0.412-tem"
            },
            {
              "method_name": "APT (Debian/Ubuntu - Official/Corretto/Zulu/Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo apt update && sudo apt install openjdk-8-jdk`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 8)",
                "**For Zulu OpenJDK:** (similar to JDK 17, just change version to 8)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 8)"
              ],
              "installation_query": "sudo apt update && sudo apt install openjdk-8-jdk -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS - Official / Corretto / Liberica)",
              "type": "Package Manager",
              "instructions": [
                "**For default OpenJDK:** `sudo dnf install java-1.8.0-openjdk-devel`",
                "**For Amazon Corretto:** (similar to JDK 17, just change version to 8)",
                "**For BellSoft Liberica JDK:** (similar to JDK 17, just change version to 8)"
              ],
              "installation_query": "sudo dnf install java-1.8.0-openjdk-devel -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S jdk8-openjdk`",
                "2. `sudo archlinux-java set java-8-openjdk`"
              ],
              "installation_query": "sudo pacman -S jdk8-openjdk"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `brew tap homebrew/cask-versions`",
                "2. `brew install --cask temurin8`",
                "3. `brew install --cask zulu8`, `brew install --cask corretto8`, `brew install --cask liberica8`"
              ],
              "installation_query": "brew tap homebrew/cask-versions && brew install --cask temurin8"
            },
            {
              "method_name": "Winget (Windows 10/11 - Adoptium/Microsoft/Zulu/Liberica)",
              "type": "Package Manager / Software Store",
              "instructions": [
                "1. `winget install EclipseAdoptium.Temurin.8.JDK`",
                "2. `winget install Microsoft.OpenJDK.8`",
                "3. `winget install Azul.Zulu.8.JDK`",
                "4. `winget install BellSoft.Liberica.8.Full.JDK`"
              ],
              "installation_query": "winget install EclipseAdoptium.Temurin.8.JDK"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. `choco install adoptopenjdk --version=8.0.412` (or latest 8.x)",
                "3. `choco install zulu-jdk --version=8.0.412`",
                "4. `choco install liberica-jdk-full --version=8.0.412`"
              ],
              "installation_query": "choco install adoptopenjdk --version=8.0.412"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex`",
                "2. Add the 'java' bucket (if not already): `scoop bucket add java`",
                "3. Install a specific JDK (e.g., Temurin 8): `scoop install temurin8-jdk`",
                "4. Install other distributions (e.g., Oracle, Azul Zulu, Amazon Corretto, Liberica, GraalVM):",
                "   `scoop install oraclejdk8`",
                "   `scoop install zulu8-jdk`",
                "   `scoop install corretto8-jdk`",
                "   `scoop install liberica8-full-jdk`",
                "   `scoop install graalvm-ce-java8`",
                "   `scoop install sapmachine8-jdk`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex; scoop bucket add java; scoop install temurin8-jdk"
            }
          ]
        }
      ]
    }
  ],
  "Build_Tools": [
    {
      "name": "Apache Maven",
      "publisher": "Apache Software Foundation",
      "description": "A software project management and comprehension tool. Based on the concept of a Project Object Model (POM), Maven can manage a project's build, reporting, and documentation from a central piece of information.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 3.9.6)",
          "release_date": "Constantly updated, refer to Maven website",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires Java JDK (version depends on Maven version, Maven 3.9.x requires JDK 8 or higher).",
          "installation_methods": [
            {
              "method_name": "Direct Download (Tar.gz/ZIP)",
              "type": "Archive Extraction",
              "instructions": [
                "1. Visit the Apache Maven downloads page: https://maven.apache.org/download.cgi",
                "2. Download the binary archive (e.g., `apache-maven-3.9.6-bin.zip` for Windows, `.tar.gz` for Linux/macOS).",
                "3. Extract the archive to a directory (e.g., `C:\\Program Files\\Apache\\maven` on Windows, `/opt/maven` on Linux/macOS).",
                "4. Set environment variables:",
                "   - `M2_HOME`: point to the extracted directory (e.g., `C:\\Program Files\\Apache\\maven` or `/opt/maven`)",
                "   - Add `%M2_HOME%\\bin` (Windows) or `$M2_HOME/bin` (Linux/macOS) to your system `PATH` environment variable.",
                "5. Verify installation: `mvn -v`"
              ],
              "installation_query": "wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz -O /tmp/maven.tar.gz && sudo tar -xzf /tmp/maven.tar.gz -C /opt/ && sudo mv /opt/apache-maven-3.9.6 /opt/maven && echo 'export M2_HOME=/opt/maven' >> ~/.bashrc && echo 'export PATH=$M2_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install Maven: `sdk install maven`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "sdk install maven"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "notes": "Version from APT might not always be the absolute latest.",
              "instructions": [
                "1. Update package lists: `sudo apt update`",
                "2. Install Maven: `sudo apt install maven -y`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "sudo apt update && sudo apt install maven -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Maven: `sudo dnf install maven -y` (or `sudo yum install maven -y`)",
                "2. Verify: `mvn -v`"
              ],
              "installation_query": "sudo dnf install maven -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Maven: `sudo pacman -S maven`",
                "2. Verify: `mvn -v`"
              ],
              "installation_query": "sudo pacman -S maven"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Install Maven: `brew install maven`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "brew install maven"
            },
            {
              "method_name": "Winget (Windows 10/11)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Winget is installed.",
                "2. Install Maven: `winget install Apache.Maven`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "winget install Apache.Maven"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey if you haven't already: `Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))` (run in Admin PowerShell).",
                "2. Install Maven: `choco install maven`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "choco install maven"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop if you haven't already: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')` (run in PowerShell).",
                "2. Add the 'java' bucket: `scoop bucket add java`",
                "3. Install Maven: `scoop install maven`",
                "4. Verify: `mvn -v`"
              ],
              "installation_query": "scoop install maven"
            }
          ]
        },
        {
          "version_name": "Maven 3.6.3",
          "release_date": "October 2019",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Commonly used older version, compatible with JDK 7 and higher. Still present in many legacy build systems.",
          "installation_methods": [
            {
              "method_name": "Direct Download (Tar.gz/ZIP)",
              "type": "Archive Extraction",
              "instructions": [
                "1. Visit Maven Archives: https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/",
                "2. Download `apache-maven-3.6.3-bin.zip` or `.tar.gz`.",
                "3. Extract and configure environment variables as per the latest version's direct download instructions, pointing `M2_HOME` to the 3.6.3 directory."
              ],
              "installation_query": "wget https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz -O /tmp/maven-3.6.3.tar.gz && sudo tar -xzf /tmp/maven-3.6.3.tar.gz -C /opt/ && sudo mv /opt/apache-maven-3.6.3 /opt/maven-3.6.3 && echo 'export M2_HOME=/opt/maven-3.6.3' >> ~/.bashrc && echo 'export PATH=$M2_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install a specific Maven version: `sdk install maven 3.6.3`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "sdk install maven 3.6.3"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install Maven 3.6.3: `choco install maven --version 3.6.3`",
                "3. Verify: `mvn -v`"
              ],
              "installation_query": "choco install maven --version 3.6.3"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "notes": "Scoop might not always offer direct installation of older specific versions. You might need to manually install or find a specific manifest.",
              "instructions": [
                "1. Install Scoop and add the 'java' bucket.",
                "2. Check for specific Maven 3.6.3 manifest if available: `scoop search maven`",
                "3. If available, install: `scoop install maven@3.6.3` (or similar version syntax). Otherwise, direct download is recommended for older versions."
              ],
              "installation_query": "scoop install maven@3.6.3"
            }
          ]
        }
      ]
    },
    {
      "name": "Gradle",
      "publisher": "Gradle Inc. (Open-source project)",
      "description": "A powerful build automation tool for multi-language software development. It supports a wide range of project types and uses a Groovy-based DSL (Domain Specific Language) for build scripts, also supporting Kotlin DSL.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 8.8)",
          "release_date": "Constantly updated, refer to Gradle website",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires Java JDK (version depends on Gradle version, Gradle 8.x requires JDK 8 or higher, recommend JDK 17 for latest features).",
          "installation_methods": [
            {
              "method_name": "Direct Download (ZIP)",
              "type": "Archive Extraction",
              "instructions": [
                "1. Visit the Gradle releases page: https://gradle.org/releases/",
                "2. Download the 'complete' distribution ZIP (e.g., `gradle-8.8-all.zip`).",
                "3. Extract the ZIP to a directory (e.g., `C:\\Program Files\\Gradle\\gradle-8.8` on Windows, `/opt/gradle/gradle-8.8` on Linux/macOS).",
                "4. Set environment variables:",
                "   - Add the `bin` directory of the extracted Gradle to your system `PATH` (e.g., `C:\\Program Files\\Gradle\\gradle-8.8\\bin` or `/opt/gradle/gradle-8.8/bin`).",
                "5. Verify installation: `gradle -v`"
              ],
              "installation_query": "wget https://services.gradle.org/distributions/gradle-8.8-all.zip -O /tmp/gradle.zip && sudo unzip /tmp/gradle.zip -d /opt/gradle && sudo mv /opt/gradle/gradle-8.8 /opt/gradle/current && echo 'export GRADLE_HOME=/opt/gradle/current' >> ~/.bashrc && echo 'export PATH=$GRADLE_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install Gradle: `sdk install gradle`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "sdk install gradle"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Install Gradle: `brew install gradle`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "brew install gradle"
            },
            {
              "method_name": "Winget (Windows 10/11)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Winget is installed.",
                "2. Install Gradle: `winget install Gradle.Gradle`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "winget install Gradle.Gradle"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install Gradle: `choco install gradle`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "choco install gradle"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop and add the 'java' bucket.",
                "2. Install Gradle: `scoop install gradle`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "scoop install gradle"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "notes": "Often outdated, direct download/SDKMAN! preferred for latest.",
              "instructions": [
                "1. `sudo apt update`",
                "2. `sudo apt install gradle -y`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "sudo apt update && sudo apt install gradle -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "notes": "Often outdated, direct download/SDKMAN! preferred for latest.",
              "instructions": [
                "1. `sudo dnf install gradle -y`",
                "2. Verify: `gradle -v`"
              ],
              "installation_query": "sudo dnf install gradle -y"
            }
          ]
        },
        {
          "version_name": "Gradle 7.6 (Older Stable)",
          "release_date": "November 2022",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires JDK 8 or 11. Used for projects requiring specific older Gradle features or compatibility.",
          "installation_methods": [
            {
              "method_name": "Direct Download (ZIP)",
              "type": "Archive Extraction",
              "instructions": [
                "1. Visit Gradle Releases for 7.6: https://gradle.org/releases/full/",
                "2. Download `gradle-7.6-all.zip`.",
                "3. Extract and set `PATH` as per direct download instructions, pointing to the `gradle-7.6` directory."
              ],
              "installation_query": "wget https://services.gradle.org/distributions/gradle-7.6-all.zip -O /tmp/gradle-7.6.zip && sudo unzip /tmp/gradle-7.6.zip -d /opt/gradle && sudo mv /opt/gradle/gradle-7.6 /opt/gradle/gradle-7.6 && echo 'export GRADLE_HOME=/opt/gradle/gradle-7.6' >> ~/.bashrc && echo 'export PATH=$GRADLE_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install specific version: `sdk install gradle 7.6`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "sdk install gradle 7.6"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install Gradle 7.6: `choco install gradle --version 7.6`",
                "3. Verify: `gradle -v`"
              ],
              "installation_query": "choco install gradle --version 7.6"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "notes": "Scoop might not always offer direct installation of older specific versions. You might need to manually install or find a specific manifest.",
              "instructions": [
                "1. Install Scoop and add the 'java' bucket.",
                "2. Check for specific Gradle 7.6 manifest if available: `scoop search gradle`",
                "3. If available, install: `scoop install gradle@7.6` (or similar version syntax). Otherwise, direct download is recommended for older versions."
              ],
              "installation_query": "scoop install gradle@7.6"
            }
          ]
        }
      ]
    },
    {
      "name": "Apache Ant",
      "publisher": "Apache Software Foundation",
      "description": "A Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent on each other. The main known usage of Ant is the build of Java applications.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 1.10.14)",
          "release_date": "Constantly updated, refer to Ant website",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires Java JDK (version depends on Ant version, Ant 1.10.x requires JDK 8 or higher).",
          "installation_methods": [
            {
              "method_name": "Direct Download (ZIP/Tar.gz)",
              "type": "Archive Extraction",
              "instructions": [
                "1. Visit Apache Ant downloads: https://ant.apache.org/bindownload.cgi",
                "2. Download the binary distribution (e.g., `apache-ant-1.10.14-bin.zip` for Windows, `.tar.gz` for Linux/macOS).",
                "3. Extract the archive to a directory (e.g., `C:\\Program Files\\Apache\\ant` or `/opt/ant`).",
                "4. Set environment variables:",
                "   - `ANT_HOME`: point to the extracted directory (e.g., `C:\\Program Files\\Apache\\ant` or `/opt/ant`)",
                "   - Add `%ANT_HOME%\\bin` (Windows) or `$ANT_HOME/bin` (Linux/macOS) to your system `PATH` environment variable.",
                "5. Verify installation: `ant -version`"
              ],
              "installation_query": "wget https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.14-bin.tar.gz -O /tmp/ant.tar.gz && sudo tar -xzf /tmp/ant.tar.gz -C /opt/ && sudo mv /opt/apache-ant-1.10.14 /opt/ant && echo 'export ANT_HOME=/opt/ant' >> ~/.bashrc && echo 'export PATH=$ANT_HOME/bin:$PATH' >> ~/.bashrc"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install Ant: `sdk install ant`",
                "3. Verify: `ant -version`"
              ],
              "installation_query": "sdk install ant"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo apt update`",
                "2. `sudo apt install ant -y`",
                "3. Verify: `ant -version`"
              ],
              "installation_query": "sudo apt update && sudo apt install ant -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo dnf install ant -y`",
                "2. Verify: `ant -version`"
              ],
              "installation_query": "sudo dnf install ant -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S ant`",
                "2. Verify: `ant -version`"
              ],
              "installation_query": "sudo pacman -S ant"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. `brew install ant`",
                "2. Verify: `ant -version`"
              ],
              "installation_query": "brew install ant"
            },
            {
              "method_name": "Winget (Windows 10/11)",
              "type": "Package Manager",
              "instructions": [
                "1. `winget install Apache.Ant`",
                "2. Verify: `ant -version`"
              ],
              "installation_query": "winget install Apache.Ant"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install Ant: `choco install ant`",
                "3. Verify: `ant -version`"
              ],
              "installation_query": "choco install ant"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop.",
                "2. Install Ant: `scoop install ant`",
                "3. Verify: `ant -version`"
              ],
              "installation_query": "scoop install ant"
            }
          ]
        }
      ]
    },
    {
      "name": "Bazel",
      "publisher": "Google (Open-source project)",
      "description": "A fast, scalable, multi-language, and extensible build system developed by Google. It supports a wide variety of languages and platforms, with strong support for Java, C++, Android, and iOS.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 7.1.2)",
          "release_date": "Constantly updated, refer to Bazel website",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires Java JDK. Recommended to use Bazelisk for managing Bazel versions.",
          "installation_methods": [
            {
              "method_name": "Bazelisk (Recommended)",
              "type": "Tool/Script",
              "instructions": [
                "1. Install Bazelisk, which is a wrapper that automatically downloads the appropriate Bazel version.",
                "2. For macOS/Linux (Homebrew): `brew install bazelisk`",
                "3. For Windows (Chocolatey): `choco install bazelisk`",
                "4. For Windows (Scoop): `scoop install bazelisk`",
                "5. Verify: `bazel version`"
              ],
              "installation_query": "brew install bazelisk || choco install bazelisk || scoop install bazelisk"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Install `curl` if not present: `sudo apt install curl gnupg -y`",
                "2. Add Bazel distribution URI as a package source:",
                "   `echo \"deb [arch=$(dpkg --print-architecture)] https://mirror.bazel.build/ubuntu stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list`",
                "3. Download and add the Bazel public key:",
                "   `curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -`",
                "4. Update package lists: `sudo apt update`",
                "5. Install Bazel: `sudo apt install bazel -y`",
                "6. Verify: `bazel version`"
              ],
              "installation_query": "sudo apt install curl gnupg -y && echo \"deb [arch=$(dpkg --print-architecture)] https://mirror.bazel.build/ubuntu stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - && sudo apt update && sudo apt install bazel -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Download the Bazel `.repo` file:",
                "   `sudo wget -O /etc/yum.repos.d/bazel.repo https://bazel.build/rpms/fedora/bazel-fedora.repo`",
                "2. Install Bazel: `sudo dnf install bazel -y`",
                "3. Verify: `bazel version`"
              ],
              "installation_query": "sudo wget -O /etc/yum.repos.d/bazel.repo https://bazel.build/rpms/fedora/bazel-fedora.repo && sudo dnf install bazel -y"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Install Bazel: `brew install bazel`",
                "3. Verify: `bazel version`"
              ],
              "installation_query": "brew install bazel"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install Bazel: `choco install bazel`",
                "3. Verify: `bazel version`"
              ],
              "installation_query": "choco install bazel"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop.",
                "2. Add the 'main' bucket if not already added: `scoop bucket add main`",
                "3. Install Bazel: `scoop install bazel`",
                "4. Verify: `bazel version`"
              ],
              "installation_query": "scoop install bazel"
            }
          ]
        }
      ]
    },
    {
      "name": "SBT (Scala Build Tool)",
      "publisher": "Lightbend (Open-source project)",
      "description": "An interactive build tool for Scala and Java projects. It features incremental compilation, automatic dependency management, and a flexible plugin system.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 1.9.9)",
          "release_date": "Constantly updated, refer to SBT website",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Requires Java JDK (JDK 8 or higher, recommend JDK 11+).",
          "installation_methods": [
            {
              "method_name": "Direct Download (ZIP/MSI/DEB/RPM)",
              "type": "Archive/Installer",
              "instructions": [
                "1. Visit the SBT downloads page: https://www.scala-sbt.org/download.html",
                "2. Download the appropriate distribution for your OS (e.g., `.zip` for manual extraction, `.msi` for Windows, `.deb` for Debian/Ubuntu, `.rpm` for Fedora/RHEL).",
                "3. For ZIP: Extract to a directory and add its `bin` directory to your system `PATH`.",
                "4. For installers: Run the installer.",
                "5. Verify installation: `sbt about`"
              ],
              "installation_query": "For DEB: wget https://github.com/sbt/sbt/releases/download/v1.9.9/sbt-1.9.9.deb -O /tmp/sbt.deb && sudo dpkg -i /tmp/sbt.deb && sudo apt update && sudo apt install -f -y; For RPM: sudo wget https://github.com/sbt/sbt/releases/download/v1.9.9/sbt-1.9.9.rpm -O /tmp/sbt.rpm && sudo rpm -i /tmp/sbt.rpm"
            },
            {
              "method_name": "SDKMAN! (Linux/macOS/WSL)",
              "type": "Tool/Script",
              "instructions": [
                "1. Ensure SDKMAN! is installed and initialized.",
                "2. Install SBT: `sdk install sbt`",
                "3. Verify: `sbt about`"
              ],
              "installation_query": "sdk install sbt"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Install SBT: `brew install sbt`",
                "3. Verify: `sbt about`"
              ],
              "installation_query": "brew install sbt"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Chocolatey.",
                "2. Install SBT: `choco install sbt`",
                "3. Verify: `sbt about`"
              ],
              "installation_query": "choco install sbt"
            },
            {
              "method_name": "Scoop (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. Install Scoop and add the 'java' bucket.",
                "2. Install SBT: `scoop install sbt`",
                "3. Verify: `sbt about`"
              ],
              "installation_query": "scoop install sbt"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Install `apt-transport-https` if not present: `sudo apt install apt-transport-https -y`",
                "2. Add the `sbt` repository:",
                "   `echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | sudo tee /etc/apt/sources.list.d/sbt.list`",
                "3. Add the GPG key:",
                "   `curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo apt-key add`",
                "4. Update package lists: `sudo apt update`",
                "5. Install SBT: `sudo apt install sbt -y`",
                "6. Verify: `sbt about`"
              ],
              "installation_query": "sudo apt install apt-transport-https -y && echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | sudo tee /etc/apt/sources.list.d/sbt.list && curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo apt-key add && sudo apt update && sudo apt install sbt -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. Create the `sbt.repo` file:",
                "   `sudo curl -L https://www.scala-sbt.org/sbt-rpm.repo -o /etc/yum.repos.d/sbt.repo`",
                "2. Install SBT: `sudo dnf install sbt -y` (or `sudo yum install sbt -y`)",
                "3. Verify: `sbt about`"
              ],
              "installation_query": "sudo curl -L https://www.scala-sbt.org/sbt-rpm.repo -o /etc/yum.repos.d/sbt.repo && sudo dnf install sbt -y"
            }
          ]
        }
      ]
    }
  ],
  "Databases": [
    {
      "name": "PostgreSQL",
      "publisher": "PostgreSQL Global Development Group",
      "description": "A powerful, open-source object-relational database system with a strong reputation for reliability, feature robustness, and performance.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 16.3)",
          "release_date": "Constantly updated, refer to PostgreSQL website",
          "supported_oses": [
            "Linux (Debian/Ubuntu, RHEL/Fedora, Arch)",
            "Windows",
            "macOS",
            "Docker"
          ],
          "notes": "Highly recommended for new projects. Robust feature set, strong community support.",
          "components": [
            {
              "component_name": "PostgreSQL Server",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Create the file `/etc/apt/sources.list.d/pgdg.list` and add:",
                    "   `deb https://apt.postgresql.org/pub/repos/apt/ <your_os_codename>-pgdg main` (e.g., `jammy-pgdg` for Ubuntu 22.04)",
                    "2. Import the signing key:",
                    "   `wget --quiet -O - https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -`",
                    "3. Update package lists: `sudo apt update`",
                    "4. Install PostgreSQL server: `sudo apt install postgresql-16 -y`",
                    "5. (Optional) Install `pgAdmin4` for GUI management: `sudo apt install pgadmin4 -y`",
                    "6. Service starts automatically. Check status: `sudo systemctl status postgresql`",
                    "7. Change default 'postgres' user password: `sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'new_password';\"`"
                  ],
                  "installation_query": "sudo sh -c 'echo \"deb https://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list' && wget --quiet -O - https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add - && sudo apt update && sudo apt install postgresql-16 -y && sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'your_secure_password';\""
                },
                {
                  "method_name": "DNF/YUM (RHEL/Fedora/CentOS Stream Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install PostgreSQL repository RPM:",
                    "   `sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm` (adjust EL version as needed)",
                    "2. Disable default PostgreSQL module (if present):",
                    "   `sudo dnf -qy module disable postgresql`",
                    "3. Install PostgreSQL server:",
                    "   `sudo dnf install -y postgresql16-server postgresql16-contrib`",
                    "4. Initialize database: `sudo /usr/pgsql-16/bin/postgresql-16-setup initdb`",
                    "5. Start and enable service: `sudo systemctl enable postgresql-16 --now`",
                    "6. Set password for 'postgres' user: `sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'new_password';\"`"
                  ],
                  "installation_query": "sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm && sudo dnf -qy module disable postgresql && sudo dnf install -y postgresql16-server postgresql16-contrib && sudo /usr/pgsql-16/bin/postgresql-16-setup initdb && sudo systemctl enable postgresql-16 --now && sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'your_secure_password';\""
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install PostgreSQL: `brew install postgresql@16`",
                    "2. Start service: `brew services start postgresql@16`",
                    "3. Optional: Create default user (if needed, username usually same as macOS user): `psql postgres` then `CREATE ROLE <your_username> WITH LOGIN SUPERUSER;` (exit psql then `createdb <your_username>`)",
                    "4. Verify: `psql -V`"
                  ],
                  "installation_query": "brew install postgresql@16 && brew services start postgresql@16"
                },
                {
                  "method_name": "PostgreSQL Official Installer (Windows)",
                  "type": "Executable Installer (GUI)",
                  "instructions": [
                    "1. Download installer from: https://www.enterprisedb.com/downloads/postgres-postgresql-downloads (or official PostgreSQL site).",
                    "2. Run the `.exe` installer. Follow prompts for installation directory, data directory, password for 'postgres' user, port, and locale.",
                    "3. The installer also includes `pgAdmin` (GUI tool) and command-line tools.",
                    "4. After installation, add PostgreSQL `bin` directory (e.g., `C:\\Program Files\\PostgreSQL\\16\\bin`) to system `PATH`."
                  ],
                  "installation_query": "N/A (GUI installer, though silent install is possible with specific flags)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Chocolatey is installed. If not, follow instructions at https://chocolatey.org/install.",
                    "2. Install PostgreSQL: `choco install postgresql -y`",
                    "3. After installation, you may need to manually start the service and set up users/passwords."
                  ],
                  "installation_query": "choco install postgresql -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Scoop is installed. If not, open PowerShell and run: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser` then `irm get.scoop.sh | iex`",
                    "2. Install PostgreSQL: `scoop install postgresql`",
                    "3. To start/stop the service, you might use Windows services or `psql` commands."
                  ],
                  "installation_query": "scoop install postgresql"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. Ensure Docker Desktop or Docker Engine is installed and running.",
                    "2. Pull the PostgreSQL image: `docker pull postgres:16`",
                    "3. Run a container (example):",
                    "   `docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres:16`",
                    "   (Customize `some-postgres` and `mysecretpassword`. `-p 5432:5432` maps container port 5432 to host port 5432).",
                    "4. Connect using `psql` or a client tool to `localhost:5432` with user `postgres` and your chosen password."
                  ],
                  "installation_query": "docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres:16"
                }
              ]
            },
            {
              "component_name": "PostgreSQL JDBC Driver (Java Library)",
              "notes": "Add this to your Maven/Gradle dependencies for Java applications to connect to PostgreSQL.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.postgresql</groupId>",
                    "     <artifactId>postgresql</artifactId>",
                    "     <version>42.7.3</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'org.postgresql:postgresql:42.7.3' // Use the latest stable version",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                },
                {
                  "method_name": "Direct JAR Download",
                  "type": "Manual Download",
                  "instructions": [
                    "1. Visit the Maven Central Repository for PostgreSQL JDBC Driver: https://mvnrepository.com/artifact/org.postgresql/postgresql",
                    "2. Find the desired version (e.g., 42.7.3) and click 'jar' to download the JAR file.",
                    "3. Add the downloaded JAR file to your project's classpath (e.g., in IntelliJ IDEA: Project Structure -> Modules -> Dependencies -> '+' -> JARs or directories)."
                  ],
                  "installation_query": "wget https://repo1.maven.org/maven2/org/postgresql/postgresql/42.7.3/postgresql-42.7.3.jar -O postgresql-42.7.3.jar"
                }
              ]
            },
            {
              "component_name": "pgAdmin 4 (GUI Client)",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Follow the PostgreSQL APT repository setup steps (if not already done).",
                    "2. Install pgAdmin 4: `sudo apt install pgadmin4 -y`",
                    "3. Access via web browser (usually http://127.0.0.1/pgadmin4 or similar, may require initial configuration). Alternatively, `pgadmin4` command on desktop."
                  ],
                  "installation_query": "sudo apt install pgadmin4 -y"
                },
                {
                  "method_name": "Direct Installer (Windows/macOS)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download from: https://www.pgadmin.org/download/",
                    "2. Run the installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install pgadmin4 -y`"
                  ],
                  "installation_query": "choco install pgadmin4 -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `scoop install pgadmin4`"
                  ],
                  "installation_query": "scoop install pgadmin4"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull dpage/pgadmin4`",
                    "2. `docker run -p 80:80 -e 'PGADMIN_DEFAULT_EMAIL=admin@example.com' -e 'PGADMIN_DEFAULT_PASSWORD=your_pgadmin_password' -d dpage/pgadmin4`",
                    "3. Access at `http://localhost` in your browser."
                  ],
                  "installation_query": "docker run -p 80:80 -e 'PGADMIN_DEFAULT_EMAIL=admin@example.com' -e 'PGADMIN_DEFAULT_PASSWORD=your_pgadmin_password' -d dpage/pgadmin4"
                },
                {
                  "method_name": "Homebrew Cask (macOS)",
                  "type": "Package Manager / Software Store",
                  "instructions": [
                    "1. `brew install --cask pgadmin4`"
                  ],
                  "installation_query": "brew install --cask pgadmin4"
                }
              ]
            }
          ]
        },
        {
          "version_name": "PostgreSQL 14 (Older LTS)",
          "release_date": "September 2021",
          "supported_oses": [
            "Linux",
            "Windows",
            "macOS",
            "Docker"
          ],
          "notes": "Still actively supported, common in production environments that haven't upgraded to 16.",
          "components": [
            {
              "component_name": "PostgreSQL Server",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Similar to PostgreSQL 16, but specify `postgresql-14` instead of `postgresql-16`.",
                    "   `sudo apt install postgresql-14 -y`"
                  ],
                  "installation_query": "sudo sh -c 'echo \"deb https://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list' && wget --quiet -O - https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add - && sudo apt update && sudo apt install postgresql-14 -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/Fedora/CentOS Stream Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Similar to PostgreSQL 16, but specify `postgresql14-server`.",
                    "   `sudo dnf install -y postgresql14-server postgresql14-contrib`"
                  ],
                  "installation_query": "sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm && sudo dnf -qy module disable postgresql && sudo dnf install -y postgresql14-server postgresql14-contrib"
                }
              ]
            },
            {
              "component_name": "PostgreSQL JDBC Driver (Java Library)",
              "notes": "Ensure compatibility with PostgreSQL 14 server and your JDK.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.postgresql</groupId>",
                    "     <artifactId>postgresql</artifactId>",
                    "     <version>42.7.3</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "MySQL",
      "publisher": "Oracle Corporation",
      "description": "The world's most popular open-source relational database. Widely used for web applications.",
      "versions": [
        {
          "version_name": "MySQL Community Server Latest (e.g., 8.0.37)",
          "release_date": "Constantly updated, refer to MySQL website",
          "supported_oses": [
            "Linux (Debian/Ubuntu, RHEL/Fedora)",
            "Windows",
            "macOS",
            "Docker"
          ],
          "notes": "Free and open-source edition. Commercial versions (Enterprise) are also available.",
          "components": [
            {
              "component_name": "MySQL Server",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Download and install the MySQL APT repository config package:",
                    "   `wget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb -O /tmp/mysql-apt-config.deb`",
                    "   `sudo dpkg -i /tmp/mysql-apt-config.deb` (Follow prompts, select MySQL 8.0).",
                    "2. Update package lists: `sudo apt update`",
                    "3. Install MySQL server: `sudo apt install mysql-server -y` (You will be prompted to set root password and choose authentication method - recommended `Strong Password Encryption` for production).",
                    "4. Check status: `sudo systemctl status mysql`"
                  ],
                  "installation_query": "wget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb -O /tmp/mysql-apt-config.deb && sudo DEBIAN_FRONTEND=noninteractive dpkg -i /tmp/mysql-apt-config.deb <<< 'mysql-apt-config mysql-apt-config/select-server select mysql-8.0' && sudo apt update && sudo apt install -y mysql-server"
                },
                {
                  "method_name": "DNF (RHEL/Fedora/CentOS Stream Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Download and install the MySQL Yum repository config RPM:",
                    "   `sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm` (adjust EL version for RHEL 8, 7 etc.)",
                    "2. Install MySQL server: `sudo dnf install -y mysql-community-server`",
                    "3. Start and enable service: `sudo systemctl enable --now mysqld`",
                    "4. Get temporary root password: `sudo grep 'temporary password' /var/log/mysqld.log`",
                    "5. Run security script: `sudo mysql_secure_installation` (use temporary password, set new root password, remove anonymous users, disallow remote root login etc.)"
                  ],
                  "installation_query": "sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm && sudo dnf install -y mysql-community-server && sudo systemctl enable --now mysqld && echo \"Run 'sudo mysql_secure_installation' after installation to secure MySQL.\" && sudo grep 'temporary password' /var/log/mysqld.log"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install MySQL: `brew install mysql`",
                    "2. Start service: `brew services start mysql`",
                    "3. Run security script: `mysql_secure_installation` (set root password, etc.)"
                  ],
                  "installation_query": "brew install mysql && brew services start mysql"
                },
                {
                  "method_name": "MySQL Installer (Windows)",
                  "type": "Executable Installer (GUI)",
                  "instructions": [
                    "1. Download from: https://dev.mysql.com/downloads/installer/",
                    "2. Run the `mysql-installer-community-*.exe`. Choose setup type (Developer Default recommended), follow prompts for password, service name etc."
                  ],
                  "installation_query": "N/A (GUI installer, silent install possible with config file)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install mysql -y` (This installs MySQL Server and Client Tools)"
                  ],
                  "installation_query": "choco install mysql -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `scoop install mysql`"
                  ],
                  "installation_query": "scoop install mysql"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull mysql:8.0`",
                    "2. `docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -p 3306:3306 -d mysql:8.0`",
                    "3. Connect to `localhost:3306` with user `root` and `mysecretpassword`."
                  ],
                  "installation_query": "docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -p 3306:3306 -d mysql:8.0"
                }
              ]
            },
            {
              "component_name": "MySQL Connector/J (JDBC Driver)",
              "notes": "The official JDBC driver for Java applications connecting to MySQL.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>mysql</groupId>",
                    "     <artifactId>mysql-connector-java</artifactId>",
                    "     <version>8.0.33</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'mysql:mysql-connector-java:8.0.33'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "MySQL Workbench (GUI Client)",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows/macOS)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download from: https://dev.mysql.com/downloads/workbench/",
                    "2. Run installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure MySQL APT repository is configured (as for server).",
                    "2. `sudo apt install mysql-workbench -y`"
                  ],
                  "installation_query": "sudo apt install mysql-workbench -y"
                },
                {
                  "method_name": "DNF (RHEL/Fedora/CentOS Stream Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure MySQL Yum repository is configured (as for server).",
                    "2. `sudo dnf install mysql-workbench-community -y`"
                  ],
                  "installation_query": "sudo dnf install mysql-workbench-community -y"
                },
                {
                  "method_name": "Homebrew Cask (macOS)",
                  "type": "Package Manager / Software Store",
                  "instructions": [
                    "1. `brew install --cask mysqlworkbench`"
                  ],
                  "installation_query": "brew install --cask mysqlworkbench"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install mysql-workbench -y`"
                  ],
                  "installation_query": "choco install mysql-workbench -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `scoop install mysql-workbench`"
                  ],
                  "installation_query": "scoop install mysql-workbench"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "H2 Database",
      "publisher": "H2 Group (open-source)",
      "description": "An open-source relational database management system written in Java. It can be embedded in Java applications or run in client-server mode. Ideal for development, testing, and small-scale applications due to its in-memory and file-based modes.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 2.2.224)",
          "release_date": "Constantly updated",
          "supported_oses": [
            "Any OS with Java installed"
          ],
          "notes": "Lightweight, easy to embed. No separate server installation needed for embedded mode.",
          "components": [
            {
              "component_name": "H2 Database Engine (Java Library)",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add to `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.h2database</groupId>",
                    "     <artifactId>h2</artifactId>",
                    "     <version>2.2.224</version> ",
                    "     <scope>runtime</scope> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add to `build.gradle`:",
                    "   ```groovy",
                    "   runtimeOnly 'com.h2database:h2:2.2.224'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                },
                {
                  "method_name": "Direct JAR Download",
                  "type": "Manual Download",
                  "instructions": [
                    "1. Visit Maven Central: https://mvnrepository.com/artifact/com.h2database/h2",
                    "2. Download the `h2-<version>.jar` file.",
                    "3. Add the JAR to your project's classpath."
                  ],
                  "installation_query": "wget https://repo1.maven.org/maven2/com/h2database/h2/2.2.224/h2-2.2.224.jar -O h2-2.2.224.jar"
                }
              ]
            },
            {
              "component_name": "H2 Console (Web-based GUI)",
              "installation_methods": [
                {
                  "method_name": "Launch from JAR (after dependency or direct download)",
                  "type": "Executable JAR",
                  "instructions": [
                    "1. Navigate to the directory where `h2-<version>.jar` is located (e.g., your Maven local repository, or where you downloaded it).",
                    "2. Run: `java -jar h2-<version>.jar`",
                    "3. A browser window will open to `http://localhost:8082/` where you can connect to H2 databases."
                  ],
                  "installation_query": "java -cp ~/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar org.h2.tools.Console"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "MongoDB",
      "publisher": "MongoDB Inc.",
      "description": "A popular NoSQL document database. It uses JSON-like documents with optional schemas. Known for its flexibility, scalability, and ability to handle large volumes of unstructured data.",
      "versions": [
        {
          "version_name": "MongoDB Community Server Latest (e.g., 7.0.9)",
          "release_date": "Constantly updated, refer to MongoDB website",
          "supported_oses": [
            "Linux (Debian/Ubuntu, RHEL/Fedora, Amazon Linux)",
            "Windows",
            "macOS",
            "Docker"
          ],
          "notes": "Free and open-source version for local development and non-commercial use.",
          "components": [
            {
              "component_name": "MongoDB Server (mongod)",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Import the MongoDB public GPG key:",
                    "   `wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-archive-keyring.gpg`",
                    "2. Create a list file for MongoDB (replace `jammy` with your Ubuntu version, e.g., `noble` for 24.04):",
                    "   `echo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list`",
                    "3. Reload local package database: `sudo apt update`",
                    "4. Install MongoDB: `sudo apt install -y mongodb-org`",
                    "5. Start MongoDB: `sudo systemctl start mongod`",
                    "6. Enable on boot: `sudo systemctl enable mongod`",
                    "7. Verify status: `sudo systemctl status mongod`"
                  ],
                  "installation_query": "wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-archive-keyring.gpg && echo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list && sudo apt update && sudo apt install -y mongodb-org && sudo systemctl start mongod && sudo systemctl enable mongod"
                },
                {
                  "method_name": "DNF (RHEL/Fedora/CentOS Stream Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Create a `/etc/yum.repos.d/mongodb-org-7.0.repo` file with the following content:",
                    "   ```",
                    "   [mongodb-org-7.0]",
                    "   name=MongoDB Repository",
                    "   baseurl=[https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/7.0/x86_64/](https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/7.0/x86_64/)",
                    "   gpgcheck=1",
                    "   enabled=1",
                    "   gpgkey=[https://www.mongodb.org/static/pgp/server-7.0.asc](https://www.mongodb.org/static/pgp/server-7.0.asc)",
                    "   ```",
                    "2. Install MongoDB: `sudo dnf install -y mongodb-org`",
                    "3. Start MongoDB: `sudo systemctl start mongod`",
                    "4. Enable on boot: `sudo systemctl enable mongod`",
                    "5. Verify status: `sudo systemctl status mongod`"
                  ],
                  "installation_query": "sudo sh -c 'echo \"[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/7.0/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\" > /etc/yum.repos.d/mongodb-org-7.0.repo' && sudo dnf install -y mongodb-org && sudo systemctl start mongod && sudo systemctl enable mongod"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Tap MongoDB Homebrew repository: `brew tap mongodb/brew`",
                    "2. Install MongoDB: `brew install mongodb-community@7.0`",
                    "3. Start service: `brew services start mongodb-community@7.0`",
                    "4. Verify: `mongod --version`"
                  ],
                  "installation_query": "brew tap mongodb/brew && brew install mongodb-community@7.0 && brew services start mongodb-community@7.0"
                },
                {
                  "method_name": "MongoDB Community Server Installer (Windows)",
                  "type": "MSI Installer (GUI)",
                  "instructions": [
                    "1. Download from: https://www.mongodb.com/try/download/community",
                    "2. Run the MSI installer. Choose 'Complete' setup. Can also install MongoDB Compass (GUI client) during this process."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install mongodb -y`"
                  ],
                  "installation_query": "choco install mongodb -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Add the Extras bucket: `scoop bucket add extras`",
                    "2. Install MongoDB: `scoop install mongodb`"
                  ],
                  "installation_query": "scoop bucket add extras && scoop install mongodb"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull mongo:7.0`",
                    "2. `docker run --name some-mongo -p 27017:27017 -d mongo:7.0`",
                    "3. Connect to `localhost:27017`."
                  ],
                  "installation_query": "docker run --name some-mongo -e MYSQL_ROOT_PASSWORD=mysecretpassword -p 27017:27017 -d mongo:7.0"
                }
              ]
            },
            {
              "component_name": "MongoDB Java Driver",
              "notes": "The official MongoDB driver for Java applications.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.mongodb</groupId>",
                    "     <artifactId>mongodb-driver-sync</artifactId>",
                    "     <version>4.11.1</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'org.mongodb:mongodb-driver-sync:4.11.1'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "MongoDB Compass (GUI Client)",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows/macOS/Linux)",
                  "type": "Executable Installer / DMG / .deb / .rpm",
                  "instructions": [
                    "1. Download from: https://www.mongodb.com/products/compass",
                    "2. Run the appropriate installer for your OS."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install mongodb-compass -y`"
                  ],
                  "installation_query": "choco install mongodb-compass -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Add the Extras bucket: `scoop bucket add extras`",
                    "2. Install MongoDB Compass: `scoop install mongodb-compass`"
                  ],
                  "installation_query": "scoop bucket add extras && scoop install mongodb-compass"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Oracle Database",
      "publisher": "Oracle Corporation",
      "description": "A multi-model database management system produced and marketed by Oracle Corporation. It is one of the most widely used relational database systems in the world, especially in enterprise environments.",
      "versions": [
        {
          "version_name": "Oracle Database 23c Free (Developer Release)",
          "release_date": "April 2023",
          "supported_oses": [
            "Linux (Oracle Linux, RHEL, Ubuntu)",
            "Windows",
            "Docker"
          ],
          "notes": "Free for development and production use. Provides a subset of enterprise features. Excellent for Java development due to native support.",
          "components": [
            {
              "component_name": "Oracle Database 23c Free",
              "installation_methods": [
                {
                  "method_name": "RPM (Oracle Linux, RHEL, CentOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Download the `oracle-database-free-23c-1.0-1.el8.x86_64.rpm` from Oracle's website (requires Oracle account): https://www.oracle.com/database/technologies/downloads/database-free-downloads.html",
                    "2. Install the RPM: `sudo yum localinstall -y oracle-database-free-23c-1.0-1.el8.x86_64.rpm` (adjust for `dnf` on newer Fedora/RHEL)",
                    "3. Configure database (sets listener, PDB, etc.): `sudo /etc/init.d/oracle-free-23c configure` (You will be prompted for passwords for `SYS`, `SYSTEM`, `PDBADMIN`).",
                    "4. Verify service: `sudo systemctl status oracle-free-23c`"
                  ],
                  "installation_query": "N/A (Download requires login, configuration is interactive)"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull container-registry.oracle.com/database/free:23.4.0.24.05`",
                    "2. `docker run -d --name oracle_free -p 1521:1521 -p 5500:5500 container-registry.oracle.com/database/free:23.4.0.24.05`",
                    "3. The first run takes time to initialize. Check logs: `docker logs -f oracle_free` until you see 'DATABASE IS READY TO USE!'",
                    "4. Default user: `SYS` or `SYSTEM` (password is auto-generated and printed in logs or you can set `ORACLE_PWD` env var)."
                  ],
                  "installation_query": "docker run -d --name oracle_free -p 1521:1521 -p 5500:5500 -e ORACLE_PWD=your_strong_password container-registry.oracle.com/database/free:23.4.0.24.05"
                },
                {
                  "method_name": "Official Installer (Windows)",
                  "type": "Executable Installer (GUI)",
                  "instructions": [
                    "1. Download the installer from Oracle's website (requires Oracle account): https://www.oracle.com/database/technologies/downloads/database-free-downloads.html",
                    "2. Extract the zip file and run `setup.exe`. Follow the guided installation. Select 'Single instance database installation' and set passwords."
                  ],
                  "installation_query": "N/A (GUI installer)"
                }
              ]
            },
            {
              "component_name": "Oracle JDBC Driver (ojdbc)",
              "notes": "The official JDBC driver for Java applications connecting to Oracle Database.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Oracle JDBC drivers are typically not on Maven Central. You might need to add Oracle's Maven repository or manually install the JAR.",
                    "2. For Oracle's Maven repository (requires Oracle account for credentials if private):",
                    "   Add to your `pom.xml`'s `<repositories>` section:",
                    "   ```xml",
                    "   <repository>",
                    "     <id>oracle</id>",
                    "     <name>Oracle Maven Repository</name>",
                    "     <url>[https://maven.oracle.com](https://maven.oracle.com)</url>",
                    "     <layout>default</layout>",
                    "   </repository>",
                    "   ```",
                    "   Then, in `<dependencies>`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.oracle.database.jdbc</groupId>",
                    "     <artifactId>ojdbc11</artifactId>",
                    "     <version>23.4.0.24.05</version> ",
                    "   </dependency>",
                    "   ```",
                    "3. Alternatively, manual installation of JAR to local Maven repo:",
                    "   `mvn install:install-file -Dfile=<path-to-ojdbc.jar> -DgroupId=com.oracle.database.jdbc -DartifactId=ojdbc11 -Dversion=23.4.0.24.05 -Dpackaging=jar`"
                  ],
                  "installation_query": "N/A (Maven requires configuration/manual install)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Similar to Maven, you might need to configure a custom repository or manually add the JAR.",
                    "2. In `build.gradle` (for custom repo):",
                    "   ```groovy",
                    "   repositories {",
                    "       maven {",
                    "           url '[https://maven.oracle.com](https://maven.oracle.com)'",
                    "       }",
                    "   }",
                    "   dependencies {",
                    "       implementation 'com.oracle.database.jdbc:ojdbc11:23.4.0.24.05'",
                    "   }",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle requires configuration)"
                },
                {
                  "method_name": "Direct JAR Download",
                  "type": "Manual Download",
                  "instructions": [
                    "1. Download `ojdbc11.jar` from Oracle JDBC Driver Downloads: https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html (requires Oracle account).",
                    "2. Add the downloaded JAR file to your project's classpath."
                  ],
                  "installation_query": "N/A (Download requires login)"
                }
              ]
            },
            {
              "component_name": "SQL Developer (GUI Client)",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows/macOS/Linux)",
                  "type": "Executable / ZIP",
                  "instructions": [
                    "1. Download from: https://www.oracle.com/tools/downloads/sqldev-downloads.html (requires Oracle account).",
                    "2. Extract the downloaded ZIP. Run `sqldeveloper.exe` (Windows), `SQLDeveloper.app` (macOS), or `sqldeveloper.sh` (Linux)."
                  ],
                  "installation_query": "N/A (GUI application, direct download)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Microsoft SQL Server",
      "publisher": "Microsoft Corporation",
      "description": "A relational database management system developed by Microsoft. It's widely used in enterprise IT environments, especially with other Microsoft technologies. SQL Server Express is a free edition for development and small applications.",
      "versions": [
        {
          "version_name": "SQL Server 2022 Express Edition",
          "release_date": "October 2022",
          "supported_oses": [
            "Windows",
            "Linux (Docker, specific distributions)",
            "Docker"
          ],
          "notes": "Free, entry-level database for learning and small applications. Full versions offer more features and scalability.",
          "components": [
            {
              "component_name": "SQL Server Engine (Express Edition)",
              "installation_methods": [
                {
                  "method_name": "Executable Installer (Windows)",
                  "type": "GUI Installer",
                  "instructions": [
                    "1. Download SQL Server 2022 Express from Microsoft: https://www.microsoft.com/en-us/sql-server/sql-server-downloads",
                    "2. Run the installer. Choose 'Basic' for quick setup or 'Custom' for more options. Select installation path, specify an instance name (e.g., `SQLEXPRESS`), and set a strong password for the `sa` user."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Docker Container (Linux/Windows)",
                  "type": "Container Image",
                  "instructions": [
                    "1. For SQL Server on Linux (Docker): `docker pull mcr.microsoft.com/mssql/server:2022-latest`",
                    "2. Run container:",
                    "   `docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=YourStrongPasswordHere!@#' -p 1433:1433 --name sqlserver_2022 -d mcr.microsoft.com/mssql/server:2022-latest`",
                    "   (Replace `YourStrongPasswordHere!@#` with a strong password).",
                    "3. Connect to `localhost:1433` with user `sa` and your password."
                  ],
                  "installation_query": "docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=YourStrongPasswordHere!@#' -p 1433:1433 --name sqlserver_2022 -d mcr.microsoft.com/mssql/server:2022-latest"
                }
              ]
            },
            {
              "component_name": "Microsoft JDBC Driver for SQL Server",
              "notes": "The official JDBC driver for Java applications connecting to SQL Server.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.microsoft.sqlserver</groupId>",
                    "     <artifactId>mssql-jdbc</artifactId>",
                    "     <version>12.6.1.jre11</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'com.microsoft.sqlserver:mssql-jdbc:12.6.1.jre11'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                },
                {
                  "method_name": "Direct JAR Download",
                  "type": "Manual Download",
                  "instructions": [
                    "1. Download the JDBC driver JAR from Microsoft: https://learn.microsoft.com/en-us/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server?view=sql-server-ver16",
                    "2. Add the downloaded JAR file to your project's classpath."
                  ],
                  "installation_query": "N/A (Manual download)"
                }
              ]
            },
            {
              "component_name": "SQL Server Management Studio (SSMS) (GUI Client)",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download SSMS from Microsoft: https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver16",
                    "2. Run the installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Azure Data Studio (Cross-platform GUI Client)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download Azure Data Studio from Microsoft: https://learn.microsoft.com/en-us/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver16",
                    "2. Install and run. Provides a modern experience for working with SQL Server on various OS."
                  ],
                  "installation_query": "N/A (GUI installer)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Apache Cassandra",
      "publisher": "Apache Software Foundation",
      "description": "A free and open-source, distributed, wide-column store, NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 4.1.4)",
          "release_date": "Constantly updated, refer to Apache Cassandra website",
          "supported_oses": [
            "Linux",
            "Windows (via WSL or Docker)",
            "macOS",
            "Docker"
          ],
          "notes": "Ideal for high-volume, real-time data workloads. Requires Java Runtime Environment (JRE) to run.",
          "components": [
            {
              "component_name": "Cassandra Server",
              "installation_methods": [
                {
                  "method_name": "Tarball (Linux/macOS)",
                  "type": "Manual Extraction",
                  "instructions": [
                    "1. Ensure Java 8 or Java 11 is installed (check Cassandra version compatibility).",
                    "2. Download the latest stable tarball from Apache Cassandra downloads: https://cassandra.apache.org/download/",
                    "3. Extract the tarball: `tar -xvf apache-cassandra-4.1.4-bin.tar.gz`",
                    "4. Navigate to the extracted directory: `cd apache-cassandra-4.1.4`",
                    "5. Start Cassandra: `./bin/cassandra -f` (for foreground) or `./bin/cassandra` (for background).",
                    "6. To connect, use `cqlsh` in the `bin` directory: `./bin/cqlsh`"
                  ],
                  "installation_query": "wget https://downloads.apache.org/cassandra/4.1.4/apache-cassandra-4.1.4-bin.tar.gz && tar -xvf apache-cassandra-4.1.4-bin.tar.gz && cd apache-cassandra-4.1.4 && ./bin/cassandra"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull cassandra:4.1`",
                    "2. `docker run --name some-cassandra -p 9042:9042 -d cassandra:4.1`",
                    "3. Connect using `cqlsh` from another container or client tool to `localhost:9042`."
                  ],
                  "installation_query": "docker run --name some-cassandra -p 9042:9042 -d cassandra:4.1"
                }
              ]
            },
            {
              "component_name": "Cassandra Java Driver (Datastax Java Driver)",
              "notes": "The official Java driver for Apache Cassandra.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.datastax.oss</groupId>",
                    "     <artifactId>java-driver-core</artifactId>",
                    "     <version>4.17.0</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'com.datastax.oss:java-driver-core:4.17.0'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "DBeaver (Universal Database Client)",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows/macOS/Linux)",
                  "type": "Executable Installer / ZIP / .deb / .rpm",
                  "instructions": [
                    "1. Download from: https://dbeaver.io/download/",
                    "2. Run the appropriate installer. Supports Cassandra and many other databases."
                  ],
                  "installation_query": "N/A (GUI installer)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Redis",
      "publisher": "Redis Labs / Redis Community",
      "description": "An open-source, in-memory data structure store, used as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, sorted sets with range queries, etc.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 7.2.4)",
          "release_date": "Constantly updated, refer to Redis website",
          "supported_oses": [
            "Linux",
            "macOS",
            "Windows (via WSL2 or Scoop)",
            "Docker"
          ],
          "notes": "Primarily used as a cache or for real-time data. Not a traditional relational database.",
          "components": [
            {
              "component_name": "Redis Server",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo apt update`",
                    "2. `sudo apt install redis-server -y`",
                    "3. Start and enable service: `sudo systemctl enable redis-server --now`",
                    "4. Verify: `redis-cli ping` (should return PONG)"
                  ],
                  "installation_query": "sudo apt update && sudo apt install redis-server -y && sudo systemctl enable redis-server --now"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install redis`",
                    "2. Start service: `brew services start redis`",
                    "3. Verify: `redis-cli ping`"
                  ],
                  "installation_query": "brew install redis && brew services start redis"
                },
                {
                  "method_name": "Scoop (Windows - via WSL2 or native port)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Scoop is installed.",
                    "2. `scoop install redis` (This typically installs the native Windows port if available, or suggests WSL2 for full features).",
                    "3. For WSL2, first install WSL2 and an Ubuntu distro, then follow Linux instructions inside WSL2."
                  ],
                  "installation_query": "scoop install redis"
                },
                {
                  "method_name": "Docker Container",
                  "type": "Container Image",
                  "instructions": [
                    "1. `docker pull redis:7.2`",
                    "2. `docker run --name some-redis -p 6379:6379 -d redis:7.2`",
                    "3. Connect to `localhost:6379`."
                  ],
                  "installation_query": "docker run --name some-redis -p 6379:6379 -d redis:7.2"
                }
              ]
            },
            {
              "component_name": "Jedis (Java Client)",
              "notes": "A popular and mature Java client for Redis.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>redis.clients</groupId>",
                    "     <artifactId>jedis</artifactId>",
                    "     <version>5.1.3</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'redis.clients:jedis:5.1.3'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Lettuce (Java Client)",
              "notes": "A modern, high-performance Redis client for Java, supporting synchronous, asynchronous, and reactive programming.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>io.lettuce</groupId>",
                    "     <artifactId>lettuce-core</artifactId>",
                    "     <version>6.3.2.RELEASE</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'io.lettuce:lettuce-core:6.3.2.RELEASE'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "Community": [
    {
      "name": "Apache Kafka",
      "publisher": "Apache Software Foundation",
      "description": "A robust, open-source distributed streaming platform maintained by the Apache Software Foundation community. It's designed for building real-time data pipelines and streaming applications, handling high-throughput, low-latency processing of event streams. Kafka is a cornerstone for many modern event-driven architectures and is widely used within the Java ecosystem.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 3.7.1)",
          "release_date": "Constantly updated, refer to Apache Kafka website",
          "supported_oses": [
            "Linux (Ubuntu, Debian, RHEL, CentOS, Fedora, Arch)",
            "macOS",
            "Windows (via WSL2 or Docker)",
            "Docker"
          ],
          "notes": "Requires Java Runtime Environment (JRE) to operate. Historically, Kafka relied on Apache ZooKeeper for metadata management, but newer versions offer KRaft (Kafka Raft) mode to eliminate this dependency, simplifying deployments. Ensure your Java version is compatible with the Kafka version you choose (typically Java 8, 11, or newer is recommended for 3.x+).",
          "components": [
            {
              "component_name": "Kafka Broker (Server) & ZooKeeper/KRaft",
              "notes": "This is the core Kafka server responsible for storing and serving messages. For simplicity in development, ZooKeeper can be run from the same Kafka distribution. For production, consider a dedicated ZooKeeper cluster or leverage Kafka's built-in KRaft mode for a ZooKeeper-less setup.",
              "installation_methods": [
                {
                  "method_name": "Tarball (Linux/macOS - Manual Extraction)",
                  "type": "Manual Extraction",
                  "instructions": [
                    "1. Ensure a compatible Java Development Kit (JDK) is installed (e.g., OpenJDK 11).",
                    "2. Download the latest stable binary tarball (e.g., `kafka_2.13-3.7.1.tgz`) from Apache Kafka downloads: https://kafka.apache.org/downloads",
                    "3. Extract the tarball: `tar -xvf kafka_2.13-3.7.1.tgz`",
                    "4. Navigate to the extracted directory: `cd kafka_2.13-3.7.1`",
                    "5. Start ZooKeeper (if using ZooKeeper mode): `./bin/zookeeper-server-start.sh config/zookeeper.properties`",
                    "6. Start Kafka Broker (ZooKeeper mode): `./bin/kafka-server-start.sh config/server.properties`",
                    "7. For KRaft mode, first generate a cluster ID: `bin/kafka-storage.sh random-uuid`, then format storage: `bin/kafka-storage.sh format -t <cluster-uuid> -c config/kraft/server.properties`, then start Kafka Broker (KRaft mode): `./bin/kafka-server-start.sh config/kraft/server.properties`"
                  ],
                  "installation_query": "wget https://downloads.apache.org/kafka/3.7.1/kafka_2.13-3.7.1.tgz && tar -xvf kafka_2.13-3.7.1.tgz && cd kafka_2.13-3.7.1 && ./bin/zookeeper-server-start.sh config/zookeeper.properties & ./bin/kafka-server-start.sh config/server.properties"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install Kafka: `brew install kafka` (This formula often includes or recommends ZooKeeper).",
                    "2. Start ZooKeeper: `brew services start zookeeper`",
                    "3. Start Kafka: `brew services start kafka`",
                    "4. To use KRaft, consult Homebrew's Kafka formula notes for specific configuration after installation."
                  ],
                  "installation_query": "brew install kafka && brew services start zookeeper && brew services start kafka"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux) - Confluent Community Repository",
                  "type": "Package Manager",
                  "notes": "Confluent provides a convenient APT repository for Kafka and related tools. This is a common way to install on Debian/Ubuntu.",
                  "instructions": [
                    "1. Add Confluent public key: `wget -qO - https://packages.confluent.io/deb/7.6/archive.key | sudo apt-key add -`",
                    "2. Add Confluent repository: `sudo add-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/7.6 stable main\"` (Adjust version '7.6' as needed).",
                    "3. Update package lists: `sudo apt update`",
                    "4. Install Kafka: `sudo apt install confluent-kafka-2.13 -y` (or `confluent-kafka` for latest stable). This will also install necessary dependencies like ZooKeeper if not using KRaft-enabled packages.",
                    "5. Start services: `sudo systemctl start confluent-zookeeper` (if applicable), `sudo systemctl start confluent-kafka`."
                  ],
                  "installation_query": "wget -qO - https://packages.confluent.io/deb/7.6/archive.key | sudo apt-key add - && sudo add-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/7.6 stable main\" && sudo apt update && sudo apt install confluent-kafka-2.13 -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux) - Confluent Community Repository",
                  "type": "Package Manager",
                  "notes": "Similar to APT, Confluent offers a Yum/DNF repository for ease of installation on RHEL-based systems.",
                  "instructions": [
                    "1. Create `/etc/yum.repos.d/confluent.repo` with content (adjust version '7.6' as needed):",
                    "   ```",
                    "   [Confluent.dist]",
                    "   name=Confluent repository (dist)",
                    "   baseurl=[https://packages.confluent.io/rpm/7.6/2.13/x86_64](https://packages.confluent.io/rpm/7.6/2.13/x86_64)",
                    "   gpgcheck=1",
                    "   gpgkey=[https://packages.confluent.io/rpm/7.6/archive.key](https://packages.confluent.io/rpm/7.6/archive.key)",
                    "   enabled=1",
                    "",
                    "   [Confluent.oss]",
                    "   name=Confluent repository (OSS)",
                    "   baseurl=[https://packages.confluent.io/rpm/7.6/2.13/x86_64/non-oss](https://packages.confluent.io/rpm/7.6/2.13/x86_64/non-oss)",
                    "   gpgcheck=1",
                    "   gpgkey=[https://packages.confluent.io/rpm/7.6/archive.key](https://packages.confluent.io/rpm/7.6/archive.key)",
                    "   enabled=1",
                    "   ```",
                    "2. Install Kafka: `sudo dnf install confluent-kafka -y` (or `confluent-kafka-2.13`).",
                    "3. Start services: `sudo systemctl start confluent-zookeeper` (if applicable), `sudo systemctl start confluent-kafka`."
                  ],
                  "installation_query": "N/A (Requires manual repo file creation, then `sudo dnf install confluent-kafka -y`)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Chocolatey is installed.",
                    "2. Install Java Development Kit (JDK): `choco install openjdk -y` (e.g., `adoptopenjdk11` or `temurin11`).",
                    "3. Install Kafka: `choco install kafka -y` (This package sets up the necessary environment and often provides a helper to run Zookeeper and Kafka).",
                    "4. Start services via Windows Services manager or using the provided batch scripts (check the `C:\\ProgramData\\chocolatey\\lib\\kafka\\tools\\kafka\\bin\\windows` directory)."
                  ],
                  "installation_query": "choco install openjdk -y && choco install kafka -y"
                },
                {
                  "method_name": "Scoop (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Scoop is installed.",
                    "2. Add the 'java' bucket: `scoop bucket add java`",
                    "3. Install a JDK (e.g., Temurin): `scoop install temurin-jdk`",
                    "4. Install Kafka: `scoop install kafka`",
                    "5. After installation, navigate to `%USERPROFILE%\\scoop\\apps\\kafka\\current` and use the `bin\\windows` scripts to start ZooKeeper (`zookeeper-server-start.bat`) and Kafka (`kafka-server-start.bat`) manually."
                  ],
                  "installation_query": "scoop bucket add java && scoop install temurin-jdk && scoop install kafka"
                },
                {
                  "method_name": "Docker Container (using Docker Compose)",
                  "type": "Container Image",
                  "notes": "Recommended for local development environments to quickly spin up Kafka and its dependencies.",
                  "instructions": [
                    "1. Install Docker Desktop.",
                    "2. Create a `docker-compose.yml` file (example for Kafka with ZooKeeper):",
                    "   ```yaml",
                    "   version: '3'",
                    "   services:",
                    "     zookeeper:",
                    "       image: confluentinc/cp-zookeeper:7.6.0",
                    "       hostname: zookeeper",
                    "       ports:",
                    "         - \"2181:2181\"",
                    "       environment:",
                    "         ZOOKEEPER_CLIENT_PORT: 2181",
                    "         ZOOKEEPER_TICK_TIME: 2000",
                    "     kafka:",
                    "       image: confluentinc/cp-kafka:7.6.0",
                    "       hostname: kafka",
                    "       ports:",
                    "         - \"9092:9092\"",
                    "       environment:",
                    "         KAFKA_BROKER_ID: 1",
                    "         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181",
                    "         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092",
                    "         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1",
                    "         KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0",
                    "       depends_on:",
                    "         - zookeeper",
                    "   ```",
                    "3. Run `docker-compose up -d` in the directory containing the YAML file.",
                    "4. To stop: `docker-compose down`."
                  ],
                  "installation_query": "N/A (Requires docker-compose.yml file)"
                }
              ]
            },
            {
              "component_name": "Kafka Java Client (Producer/Consumer API)",
              "notes": "The official Java library for building applications that send (produce) and receive (consume) messages from Kafka topics. It provides low-level control over message serialization, partitioning, and delivery semantics.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.apache.kafka</groupId>",
                    "     <artifactId>kafka-clients</artifactId>",
                    "     <version>3.7.1</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'org.apache.kafka:kafka-clients:3.7.1'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Kafka Streams (Java Library)",
              "notes": "A powerful client library for building mission-critical real-time applications and microservices. It allows for stream processing directly within your Java application, treating Kafka topics as continuous streams or tables.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.apache.kafka</groupId>",
                    "     <artifactId>kafka-streams</artifactId>",
                    "     <version>3.7.1</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'org.apache.kafka:kafka-streams:3.7.1'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Kafka Connect",
              "notes": "A framework for scalably and reliably streaming data between Apache Kafka and other data systems. It leverages existing connectors or allows you to build custom ones. Included with the Kafka distribution.",
              "installation_methods": [
                {
                  "method_name": "Included in Kafka Distribution (Configuration-driven)",
                  "type": "Command Line Tool / Configuration",
                  "instructions": [
                    "1. After extracting the Kafka tarball, Kafka Connect binaries are in the `bin` directory.",
                    "2. Start in standalone mode (for single-machine/development): `./bin/connect-standalone.sh config/connect-standalone.properties config/connector_config.properties`",
                    "3. Start in distributed mode (for production clusters): `./bin/connect-distributed.sh config/connect-distributed.properties`",
                    "4. Connectors (JAR files) are typically placed in a designated `plugin.path` directory and then configured/managed via REST API calls to the Connect cluster."
                  ],
                  "installation_query": "N/A (comes with Kafka; setup is configuration-driven)"
                }
              ]
            },
            {
              "component_name": "Spring for Apache Kafka (Spring-Kafka)",
              "notes": "Provides a high-level abstraction for building message-driven applications using Spring. It simplifies Kafka integration with Spring Boot and Spring applications, offering robust consumer and producer templates, listener containers, and transaction support. GitHub: https://github.com/spring-projects/spring-kafka",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.springframework.kafka</groupId>",
                    "     <artifactId>spring-kafka</artifactId>",
                    "     <version>3.1.5</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'org.springframework.kafka:spring-kafka:3.1.5'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Reactor Kafka (Reactive Kafka Client)",
              "notes": "A Reactive Streams API for Kafka, built on Project Reactor. It provides an asynchronous, non-blocking API for Kafka producers and consumers, ideal for reactive programming paradigms. GitHub: https://github.com/reactor/reactor-kafka",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>io.projectreactor.kafka</groupId>",
                    "     <artifactId>reactor-kafka</artifactId>",
                    "     <version>1.3.26</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'io.projectreactor.kafka:reactor-kafka:1.3.26'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Akka Streams Kafka (Alpakka Kafka Connector)",
              "notes": "Part of the Alpakka project, this library integrates Kafka with Akka Streams, enabling highly concurrent and fault-tolerant stream processing applications with backpressure. GitHub: https://github.com/akka/alpakka-kafka",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.akka</groupId>",
                    "     <artifactId>akka-stream-kafka_2.13</artifactId>",
                    "     <version>3.0.0</version> ",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `build.gradle`'s `dependencies` section:",
                    "   ```groovy",
                    "   implementation 'com.akka:akka-stream-kafka_2.13:3.0.0'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Quarkus Kafka Client",
              "notes": "Integrates Kafka with Quarkus, a cloud-native, 'Supersonic Subatomic Java' framework. Provides efficient and reactive Kafka integration with minimal boilerplate. GitHub: https://github.com/quarkusio/quarkus/tree/main/extensions/kafka-client",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency (Quarkus Extension)",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. When creating a Quarkus project, add the `quarkus-smallrye-kafka` extension.",
                    "2. If adding manually to `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>io.quarkus</groupId>",
                    "     <artifactId>quarkus-smallrye-kafka</artifactId>",
                    "   </dependency>",
                    "   ```",
                    "   (Version is managed by Quarkus BOM)."
                  ],
                  "installation_query": "N/A (Quarkus extension)"
                }
              ]
            },
            {
              "component_name": "Micronaut Kafka Client",
              "notes": "Provides seamless Kafka integration for Micronaut applications, a modern, JVM-based framework for building microservices. Supports both blocking and non-blocking Kafka consumers and producers. GitHub: https://github.com/micronaut-projects/micronaut-kafka",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the following to your `pom.xml`'s `<dependencies>` section:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>io.micronaut.kafka</groupId>",
                    "     <artifactId>micronaut-kafka</artifactId>",
                    "     <scope>compile</scope>",
                    "   </dependency>",
                    "   ```",
                    "   (Version typically managed by Micronaut BOM)."
                  ],
                  "installation_query": "N/A (Maven manages download)"
                }
              ]
            },
            {
              "component_name": "Community Tools",
              "notes": "A comprehensive selection of popular GUI and command-line tools developed by the Apache Kafka and broader community to aid in Kafka management, monitoring, and interaction.",
              "installation_methods": [
                {
                  "method_name": "Apache Kafka Command Line Tools (Bundled)",
                  "type": "Command Line Utility",
                  "notes": "These are the fundamental CLI tools that come with every Kafka distribution, used for basic administrative tasks like topic creation, listing, describing, producing, and consuming messages.",
                  "instructions": [
                    "1. Navigate to the `bin` directory of your Kafka installation.",
                    "2. Examples:",
                    "   - List topics: `./kafka-topics.sh --bootstrap-server localhost:9092 --list`",
                    "   - Produce messages: `./kafka-console-producer.sh --bootstrap-server localhost:9092 --topic my-topic`",
                    "   - Consume messages: `./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-topic --from-beginning`"
                  ],
                  "installation_query": "N/A (Bundled with Kafka distribution)"
                },
                {
                  "method_name": "kafkacat (kcat) (CLI)",
                  "type": "Command Line Utility",
                  "notes": "A versatile command-line Kafka producer and consumer. It's often preferred for quick CLI interactions due to its `netcat`-like simplicity. GitHub: https://github.com/edenhill/kcat",
                  "instructions": [
                    "1. Install via Homebrew (macOS): `brew install kafkacat`",
                    "2. Install via apt (Debian/Ubuntu): `sudo apt-get install kafkacat`",
                    "3. Build from source for other Linux distributions: `git clone https://github.com/edenhill/kcat.git && cd kcat && ./configure && make && sudo make install`",
                    "4. Example (produce): `echo 'Test message' | kafkacat -b localhost:9092 -t my_topic -P`",
                    "5. Example (consume): `kafkacat -b localhost:9092 -t my_topic -C`"
                  ],
                  "installation_query": "brew install kafkacat || sudo apt-get install kafkacat"
                },
                {
                  "method_name": "Kafka UI (Open Source)",
                  "type": "GUI Application (Web-based)",
                  "notes": "A popular open-source web UI for managing and monitoring Kafka clusters, topics, consumers, and more. Provides a user-friendly interface for common Kafka operations. GitHub: https://github.com/provectus/kafka-ui",
                  "installation_methods": [
                    {
                      "method_name": "Docker Container",
                      "type": "Container Image",
                      "instructions": [
                        "1. `docker run --name kafka-ui -p 8080:8080 -d -e KAFKA_CLUSTERS_0_NAME=local -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=localhost:9092 -e KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181 provectus/kafka-ui:latest`",
                        "2. Access via browser at `http://localhost:8080`."
                      ],
                      "installation_query": "docker run --name kafka-ui -p 8080:8080 -d -e KAFKA_CLUSTERS_0_NAME=local -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=localhost:9092 -e KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181 provectus/kafka-ui:latest"
                    },
                    {
                      "method_name": "Manual JAR / Binary",
                      "type": "Executable JAR / Binary",
                      "instructions": [
                        "1. Download the latest release JAR from Kafka UI's GitHub releases page.",
                        "2. Run with `java -jar kafka-ui.jar` and configure via `application.yml` or environment variables."
                      ],
                      "installation_query": "N/A (Manual download)"
                    }
                  ]
                },
                {
                  "method_name": "AKHQ (Open Source)",
                  "type": "GUI Application (Web-based)",
                  "notes": "Another excellent open-source web UI for Kafka, providing comprehensive features for managing topics, consumers, data, and schema registry. GitHub: https://github.com/tchiotludo/akhq",
                  "installation_methods": [
                    {
                      "method_name": "Docker Container",
                      "type": "Container Image",
                      "instructions": [
                        "1. Create `docker-compose.yml`:",
                        "   ```yaml",
                        "   version: '3'",
                        "   services:",
                        "     akhq:",
                        "       image: tchiotludo/akhq",
                        "       hostname: akhq",
                        "       ports:",
                        "         - \"8080:8080\"",
                        "       environment:",
                        "         AKHQ_CONNECTIONS_LOCAL_PROPERTIES_BOOTSTRAPSERVERS: \"kafka:9092\"",
                        "       depends_on:",
                        "         - kafka # Assuming your Kafka service is named 'kafka'",
                        "   ```",
                        "2. Run `docker-compose up -d`."
                      ],
                      "installation_query": "N/A (Requires docker-compose.yml file)"
                    }
                  ]
                },
                {
                  "method_name": "Lenses.io (Commercial/Community Edition)",
                  "type": "GUI Application (Web-based)",
                  "notes": "A powerful data ops platform for Kafka, offering comprehensive monitoring, management, and data governance features. Community Edition available for limited use. Website: https://lenses.io/",
                  "installation_methods": [
                    {
                      "method_name": "Docker Container",
                      "type": "Container Image",
                      "instructions": [
                        "1. `docker run -d --rm -p 3030:3030 --name lenses --env LENSES_LICENSE_KEY= <your_license_key_if_commercial> lensesio/lenses:latest`",
                        "2. Configure connection to your Kafka cluster via the UI."
                      ],
                      "installation_query": "N/A (Requires license or community setup)"
                    }
                  ]
                },
                {
                  "method_name": "Confluent Schema Registry",
                  "type": "Service",
                  "notes": "A crucial component in Kafka ecosystems for enforcing schema compatibility for messages, especially when using Avro, Protobuf, or JSON Schema. Provides a RESTful interface for schema management. GitHub: https://github.com/confluentinc/schema-registry",
                  "installation_methods": [
                    {
                      "method_name": "Bundled with Confluent Platform / Docker Container",
                      "type": "Software Component",
                      "instructions": [
                        "1. Often included when installing Confluent Platform (see APT/DNF/Docker Compose for Confluent Platform above).",
                        "2. Can be run as a standalone Docker container:",
                        "   `docker run -d --name schema-registry -p 8081:8081 -e SCHEMA_REGISTRY_HOST_NAME=localhost -e SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092 --network host confluentinc/cp-schema-registry:7.6.0`"
                      ],
                      "installation_query": "docker run -d --name schema-registry -p 8081:8081 -e SCHEMA_REGISTRY_HOST_NAME=localhost -e SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092 --network host confluentinc/cp-schema-registry:7.6.0"
                    }
                  ]
                },
                {
                  "method_name": "Confluent REST Proxy",
                  "type": "Service",
                  "notes": "Provides a RESTful interface to a Kafka cluster, allowing non-Java applications to produce and consume messages, and perform administrative actions without using the native Kafka protocol. GitHub: https://github.com/confluentinc/kafka-rest",
                  "installation_methods": [
                    {
                      "method_name": "Bundled with Confluent Platform / Docker Container",
                      "type": "Software Component",
                      "instructions": [
                        "1. Often included when installing Confluent Platform.",
                        "2. Can be run as a standalone Docker container:",
                        "   `docker run -d --name kafka-rest -p 8082:8082 -e KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181 -e KAFKA_REST_LISTENERS=http://0.0.0.0:8082 -e KAFKA_REST_SCHEMA_REGISTRY_URL=http://localhost:8081 --network host confluentinc/cp-kafka-rest:7.6.0`"
                      ],
                      "installation_query": "docker run -d --name kafka-rest -p 8082:8082 -e KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181 -e KAFKA_REST_LISTENERS=http://0.0.0.0:8082 -e KAFKA_REST_SCHEMA_REGISTRY_URL=http://localhost:8081 --network host confluentinc/cp-kafka-rest:7.6.0"
                    }
                  ]
                },
                {
                  "method_name": "Prometheus & Grafana (for Kafka Monitoring)",
                  "type": "Monitoring Tools",
                  "notes": "A popular combination for collecting metrics (Prometheus) and visualizing them (Grafana) for Kafka brokers and applications. Requires JMX Exporter for Kafka metrics. GitHub (Prometheus): https://github.com/prometheus/prometheus, GitHub (Grafana): https://github.com/grafana/grafana",
                  "installation_methods": [
                    {
                      "method_name": "Docker Compose (Example Setup)",
                      "type": "Container Images",
                      "instructions": [
                        "1. Requires JMX Exporter configured on Kafka brokers (often run as a Java agent).",
                        "2. Set up `prometheus.yml` and `grafana/provisioning/dashboards/kafka.json`.",
                        "3. Use `docker-compose.yml` to spin up Prometheus and Grafana containers and configure them to scrape Kafka JMX metrics."
                      ],
                      "installation_query": "N/A (Complex setup, refer to Prometheus/Grafana/JMX Exporter documentation)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
    "Backend_and_Cloud_Platforms": [
    {
      "name": "Spring Boot",
      "publisher": "VMware (Pivotal/Spring by Broadcom)",
      "description": "An opinionated framework that simplifies the development of production-ready, stand-alone, and distributable Spring applications. It takes an 'opinionated' view of the Spring platform, making it easier to get started with minimal configuration. Widely adopted as the de-facto standard for building Java-based microservices and web applications.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 3.3.1)",
          "release_date": "Constantly updated, refer to Spring Boot Release Notes",
          "supported_oses": ["Any OS with Java installed (Linux, Windows, macOS, Docker)"],
          "notes": "Spring Boot 3.x requires Java 17+ and Spring Framework 6.x. It leverages convention over configuration to rapidly build applications. It includes embedded servers (Tomcat, Jetty, Undertow). GitHub: https://github.com/spring-projects/spring-boot",
          "components": [
            {
              "component_name": "Spring Boot Starter Dependencies (Java Libraries)",
              "notes": "Starter dependencies simplify Maven/Gradle configuration by providing transitive dependencies for common scenarios (e.g., `spring-boot-starter-web`, `spring-boot-starter-data-jpa`).",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the Spring Boot parent POM to your `pom.xml`:",
                    "   ```xml",
                    "   <parent>",
                    "     <groupId>org.springframework.boot</groupId>",
                    "     <artifactId>spring-boot-starter-parent</artifactId>",
                    "     <version>3.3.1</version>",
                    "     <relativePath/> <!-- lookup parent from repository -->",
                    "   </parent>",
                    "   ```",
                    "2. Add desired starter dependencies (e.g., for web app):",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.springframework.boot</groupId>",
                    "     <artifactId>spring-boot-starter-web</artifactId>",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the Spring Boot plugin to your `build.gradle`:",
                    "   ```groovy",
                    "   plugins {",
                    "     id 'org.springframework.boot' version '3.3.1'",
                    "     id 'io.spring.dependency-management' version '1.1.5'",
                    "     id 'java'",
                    "   }",
                    "   ```",
                    "2. Add desired starter dependencies:",
                    "   ```groovy",
                    "   dependencies {",
                    "     implementation 'org.springframework.boot:spring-boot-starter-web'",
                    "     testImplementation 'org.springframework.boot:spring-boot-starter-test'",
                    "   }",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Spring Initializr (Project Generator)",
              "notes": "A web-based tool for quickly generating a new Spring Boot project structure with selected dependencies.",
              "installation_methods": [
                {
                  "method_name": "Web Interface",
                  "type": "Web Application",
                  "instructions": [
                    "1. Visit: https://start.spring.io/",
                    "2. Configure your project (e.g., Java version, Spring Boot version, Maven/Gradle, dependencies).",
                    "3. Click 'Generate' to download a zip archive with your project."
                  ],
                  "installation_query": "N/A (Web-based)"
                },
                {
                  "method_name": "IDE Integration (IntelliJ IDEA, VS Code, Eclipse)",
                  "type": "IDE Plugin / Built-in Feature",
                  "instructions": [
                    "1. In IntelliJ IDEA: File -> New -> Project... -> Spring Initializr.",
                    "2. In VS Code: Use the 'Spring Boot Extension Pack' and command palette (Ctrl+Shift+P) to search for 'Spring Boot: Generate a Maven Project...'."
                  ],
                  "installation_query": "N/A (IDE feature)"
                }
              ]
            },
            {
              "component_name": "Spring Tools Suite (STS)",
              "notes": "An Eclipse-based IDE tailored for Spring application development, providing advanced features for Spring Boot, Spring Cloud, and more. GitHub: https://github.com/spring-projects/sts4",
              "installation_methods": [
                {
                  "method_name": "Direct Download",
                  "type": "Executable Installer / ZIP",
                  "instructions": [
                    "1. Download from: https://spring.io/tools",
                    "2. Extract the downloaded archive and run the executable."
                  ],
                  "installation_query": "N/A (GUI installer)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Docker",
      "publisher": "Docker, Inc.",
      "description": "A platform that uses OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries, and configuration files; they can communicate with each other through well-defined channels. Essential for building, shipping, and running modern Java applications as microservices.",
      "versions": [
        {
          "version_name": "Docker Desktop Latest (e.g., 4.30.0)",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows (Pro/Enterprise/Edu with WSL2/Hyper-V), macOS (Intel/Apple Silicon)"],
          "notes": "Docker Desktop bundles Docker Engine, Docker CLI, Docker Compose, Kubernetes, and more into a single, easy-to-install package for development environments. GitHub (Engine): https://github.com/moby/moby, GitHub (Compose): https://github.com/docker/compose",
          "components": [
            {
              "component_name": "Docker Desktop",
              "notes": "The primary way to run Docker on macOS and Windows for development.",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Windows/macOS)",
                  "type": "Executable Installer (GUI)",
                  "instructions": [
                    "1. Download from: https://www.docker.com/products/docker-desktop",
                    "2. Run the installer and follow the on-screen instructions. Ensure WSL2 (Windows) or Rosetta 2 (macOS M1/M2) is enabled if prompted."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Ensure Chocolatey is installed.",
                    "2. Install Docker Desktop: `choco install docker-desktop -y`",
                    "3. Requires Windows reboot to complete installation."
                  ],
                  "installation_query": "choco install docker-desktop -y"
                },
                {
                  "method_name": "Homebrew Cask (macOS)",
                  "type": "Package Manager / Software Store",
                  "instructions": [
                    "1. Ensure Homebrew is installed.",
                    "2. Install Docker Desktop: `brew install --cask docker`"
                  ],
                  "installation_query": "brew install --cask docker"
                }
              ]
            },
            {
              "component_name": "Docker Engine & Docker CLI (Linux)",
              "notes": "For Linux servers and advanced users who prefer CLI-only Docker.",
              "installation_methods": [
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Update package index: `sudo apt update`",
                    "2. Install necessary packages: `sudo apt install ca-certificates curl gnupg`",
                    "3. Add Docker's official GPG key: `sudo install -m 0755 -d /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg`",
                    "4. Set up the repository: `echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null`",
                    "5. Update package index again: `sudo apt update`",
                    "6. Install Docker Engine, CLI, Containerd: `sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y`",
                    "7. (Optional) Add your user to the 'docker' group: `sudo usermod -aG docker $USER` (requires logout/login to apply)."
                  ],
                  "installation_query": "sudo apt update && sudo apt install ca-certificates curl gnupg -y && sudo install -m 0755 -d /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt update && sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Install `dnf-plugins-core`: `sudo dnf install -y dnf-plugins-core`",
                    "2. Add Docker repository: `sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo` (adjust for Fedora)",
                    "3. Install Docker Engine, CLI, Containerd: `sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y`",
                    "4. Start and enable Docker: `sudo systemctl enable docker --now`",
                    "5. (Optional) Add your user to the 'docker' group: `sudo usermod -aG docker $USER` (requires logout/login)."
                  ],
                  "installation_query": "sudo dnf install -y dnf-plugins-core && sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y && sudo systemctl enable docker --now"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Kubernetes",
      "publisher": "Cloud Native Computing Foundation (CNCF)",
      "description": "An open-source container orchestration system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. It's the industry standard for deploying Java microservices at scale in cloud-native environments.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 1.30.0)",
          "release_date": "Constantly updated, refer to Kubernetes Release Notes",
          "supported_oses": ["Linux", "Windows (via WSL2 or Minikube/Docker Desktop)", "macOS (via Minikube/Docker Desktop)"],
          "notes": "Often deployed on cloud providers like AWS, GCP, Azure, or on-premises. For local development, Minikube or Kind are popular choices. GitHub: https://github.com/kubernetes/kubernetes",
          "components": [
            {
              "component_name": "kubectl (Command Line Tool)",
              "notes": "The command-line tool for running commands against Kubernetes clusters.",
              "installation_methods": [
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install kubectl`"
                  ],
                  "installation_query": "brew install kubectl"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install kubernetes-cli -y`"
                  ],
                  "installation_query": "choco install kubernetes-cli -y"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo apt update && sudo apt install -y apt-transport-https curl`",
                    "2. `curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg`",
                    "3. `echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list`",
                    "4. `sudo apt update && sudo apt install -y kubectl`"
                  ],
                  "installation_query": "sudo apt update && sudo apt install -y apt-transport-https curl && curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list && sudo apt update && sudo apt install -y kubectl"
                },
                {
                  "method_name": "Official Release Binary",
                  "type": "Manual Download",
                  "instructions": [
                    "1. Download `kubectl` for your OS from: https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-with-curl-on-linux",
                    "2. Add the binary to your system's PATH."
                  ],
                  "installation_query": "N/A (Manual download and PATH setup)"
                }
              ]
            },
            {
              "component_name": "Minikube (Local Kubernetes)",
              "notes": "Runs a single-node Kubernetes cluster inside a VM or Docker container on your local machine, ideal for development and testing. GitHub: https://github.com/kubernetes/minikube",
              "installation_methods": [
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install minikube`",
                    "2. Start Minikube: `minikube start`"
                  ],
                  "installation_query": "brew install minikube && minikube start"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install minikube -y`",
                    "2. Start Minikube: `minikube start` (requires a compatible hypervisor like Docker Desktop, Hyper-V, or VirtualBox)."
                  ],
                  "installation_query": "choco install minikube -y && minikube start"
                },
                {
                  "method_name": "Direct Download",
                  "type": "Executable Binary",
                  "instructions": [
                    "1. Download from Minikube GitHub releases: https://github.com/kubernetes/minikube/releases",
                    "2. Place the binary in your PATH and make it executable."
                  ],
                  "installation_query": "N/A (Manual download)"
                }
              ]
            },
            {
              "component_name": "Kind (Kubernetes in Docker)",
              "notes": "A tool for running local Kubernetes clusters using Docker containers as 'nodes'. Great for testing multi-node setups locally. GitHub: https://github.com/kubernetes-sigs/kind",
              "installation_methods": [
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install kind`",
                    "2. Create cluster: `kind create cluster`"
                  ],
                  "installation_query": "brew install kind && kind create cluster"
                },
                {
                  "method_name": "Go Install (Requires Go)",
                  "type": "Go Package Manager",
                  "instructions": [
                    "1. `go install sigs.k8s.io/kind@v0.22.0` (adjust version)"
                  ],
                  "installation_query": "go install sigs.k8s.io/kind@latest"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Apache Maven",
      "publisher": "Apache Software Foundation",
      "description": "A software project management and comprehension tool. Based on the concept of a Project Object Model (POM), Maven can manage a project's build, reporting, and documentation from a central piece of information. It's a fundamental tool for almost all Java backend projects.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 3.9.6)",
          "release_date": "Constantly updated, refer to Apache Maven website",
          "supported_oses": ["Any OS with Java installed (Linux, Windows, macOS)"],
          "notes": "Requires Java Development Kit (JDK). Maven 3.9.x requires JDK 8 or above. GitHub: https://github.com/apache/maven",
          "components": [
            {
              "component_name": "Maven Core",
              "notes": "The core executable and libraries for Maven.",
              "installation_methods": [
                {
                  "method_name": "Direct Download (Binary Archive)",
                  "type": "Manual Extraction",
                  "instructions": [
                    "1. Ensure Java is installed and `JAVA_HOME` is set.",
                    "2. Download the binary tar.gz or zip archive from: https://maven.apache.org/download.cgi",
                    "3. Extract the archive to a directory (e.g., `/opt/apache-maven-3.9.6`).",
                    "4. Add `bin` directory to your system's PATH environment variable (e.g., `export PATH=/opt/apache-maven-3.9.6/bin:$PATH`).",
                    "5. Verify: `mvn -v`"
                  ],
                  "installation_query": "wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz && tar -xvzf apache-maven-3.9.6-bin.tar.gz && export PATH=$(pwd)/apache-maven-3.9.6/bin:$PATH"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install maven`"
                  ],
                  "installation_query": "brew install maven"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install maven -y`"
                  ],
                  "installation_query": "choco install maven -y"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo apt update && sudo apt install maven -y`"
                  ],
                  "installation_query": "sudo apt update && sudo apt install maven -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo dnf install maven -y`"
                  ],
                  "installation_query": "sudo dnf install maven -y"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Gradle",
      "publisher": "Gradle Inc.",
      "description": "An open-source build automation tool focused on flexibility and performance. It combines the best features of Ant and Maven, providing a Groovy/Kotlin-based DSL for build scripts. Increasingly popular for Java, Android, and polyglot projects.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 8.8)",
          "release_date": "Constantly updated, refer to Gradle Release Notes",
          "supported_oses": ["Any OS with Java installed (Linux, Windows, macOS)"],
          "notes": "Requires Java Development Kit (JDK). Gradle 8.x requires JDK 17 or above. GitHub: https://github.com/gradle/gradle",
          "components": [
            {
              "component_name": "Gradle Distribution",
              "notes": "The core executable and libraries for Gradle.",
              "installation_methods": [
                {
                  "method_name": "Gradle Wrapper (Recommended for Projects)",
                  "type": "Project-local Script",
                  "instructions": [
                    "1. Most Gradle projects include a 'Gradle Wrapper' ( `./gradlew` or `gradlew.bat` script).",
                    "2. Simply run the wrapper script from your project root (e.g., `./gradlew build`). It will automatically download and set up the correct Gradle version.",
                    "3. To initialize a new project with a wrapper: `gradle init` (if Gradle is installed globally)."
                  ],
                  "installation_query": "N/A (Project-specific setup)"
                },
                {
                  "method_name": "Direct Download (Binary Archive)",
                  "type": "Manual Extraction",
                  "instructions": [
                    "1. Ensure Java is installed and `JAVA_HOME` is set.",
                    "2. Download the binary-only distribution from: https://gradle.org/install/",
                    "3. Unzip the archive to a directory (e.g., `/opt/gradle-8.8`).",
                    "4. Add `bin` directory to your system's PATH environment variable (e.g., `export PATH=/opt/gradle-8.8/bin:$PATH`).",
                    "5. Verify: `gradle -v`"
                  ],
                  "installation_query": "wget https://services.gradle.org/distributions/gradle-8.8-bin.zip && unzip gradle-8.8-bin.zip && export PATH=$(pwd)/gradle-8.8/bin:$PATH"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install gradle`"
                  ],
                  "installation_query": "brew install gradle"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install gradle -y`"
                  ],
                  "installation_query": "choco install gradle -y"
                },
                {
                  "method_name": "SDKMAN! (Linux/macOS)",
                  "type": "Version Manager",
                  "notes": "Recommended for managing multiple JDKs, Groovy, Scala, Kotlin, and Gradle versions.",
                  "instructions": [
                    "1. Install SDKMAN!: `curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\"`",
                    "2. Install Gradle: `sdk install gradle 8.8`"
                  ],
                  "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install gradle 8.8"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Amazon Web Services (AWS)",
      "publisher": "Amazon.com, Inc.",
      "description": "The world's most comprehensive and broadly adopted cloud platform, offering over 200 fully featured services from data centers globally. For Java backend developers, key services include EC2 (virtual servers), Lambda (serverless functions), RDS (managed databases), S3 (object storage), SQS/SNS (messaging), and EKS (managed Kubernetes).",
      "versions": [
        {
          "version_name": "General Availability (Continuous Updates)",
          "release_date": "Continuously evolving services",
          "supported_oses": ["N/A (Cloud Platform accessed via web, CLI, SDKs)"],
          "notes": "AWS provides a free tier for many services. Requires an AWS account. Best practices include using Infrastructure as Code (IaC) tools like AWS CloudFormation or Terraform. GitHub (AWS SDK for Java): https://github.com/aws/aws-sdk-java-v2",
          "components": [
            {
              "component_name": "AWS Account & Management Console",
              "notes": "The starting point for all AWS interactions.",
              "installation_methods": [
                {
                  "method_name": "Web Registration",
                  "type": "Web Interface",
                  "instructions": [
                    "1. Visit: https://aws.amazon.com/free/",
                    "2. Click 'Create a Free Account' and follow the registration process (requires credit card for verification, but free tier usage is not charged)."
                  ],
                  "installation_query": "N/A (Web-based registration)"
                }
              ]
            },
            {
              "component_name": "AWS CLI (Command Line Interface)",
              "notes": "A unified tool to manage your AWS services from the command line.",
              "installation_methods": [
                {
                  "method_name": "Pip (Python Package Installer)",
                  "type": "Python Package Manager",
                  "instructions": [
                    "1. Ensure Python and pip are installed.",
                    "2. `pip install awscli`",
                    "3. Configure: `aws configure` (provide Access Key ID, Secret Access Key, region, output format)."
                  ],
                  "installation_query": "pip install awscli && aws configure"
                },
                {
                  "method_name": "MSI Installer (Windows)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download from: https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html",
                    "2. Run installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install awscli`",
                    "2. Configure: `aws configure`"
                  ],
                  "installation_query": "brew install awscli && aws configure"
                }
              ]
            },
            {
              "component_name": "AWS SDK for Java 2.x",
              "notes": "The official Java library for interacting with AWS services programmatically. Supports non-blocking I/O and various authentication methods.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the AWS SDK BOM to your `pom.xml`'s `<dependencyManagement>` section for version control:",
                    "   ```xml",
                    "   <dependencyManagement>",
                    "     <dependencies>",
                    "       <dependency>",
                    "         <groupId>software.amazon.awssdk</groupId>",
                    "         <artifactId>bom</artifactId>",
                    "         <version>2.25.64</version>",
                    "         <type>pom</type>",
                    "         <scope>import</scope>",
                    "       </dependency>",
                    "     </dependencies>",
                    "   </dependencyManagement>",
                    "   ```",
                    "2. Add specific service dependencies (e.g., S3, Lambda, EC2) to `<dependencies>` without specifying version:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>software.amazon.awssdk</groupId>",
                    "     <artifactId>s3</artifactId>",
                    "   </dependency>",
                    "   <dependency>",
                    "     <groupId>software.amazon.awssdk</groupId>",
                    "     <artifactId>lambda</artifactId>",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add specific service dependencies to your `build.gradle` (using the BOM for consistent versions):",
                    "   ```groovy",
                    "   dependencies {",
                    "     implementation platform('software.amazon.awssdk:bom:2.25.64')",
                    "     implementation 'software.amazon.awssdk:s3'",
                    "     implementation 'software.amazon.awssdk:lambda'",
                    "   }",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "AWS SAM CLI (Serverless Application Model)",
              "notes": "An open-source command-line tool for building, testing, and deploying serverless applications defined with AWS SAM templates. Useful for Java Lambda functions. GitHub: https://github.com/aws/aws-sam-cli",
              "installation_methods": [
                {
                  "method_name": "Pip (Python Package Installer)",
                  "type": "Python Package Manager",
                  "instructions": [
                    "1. `pip install aws-sam-cli`"
                  ],
                  "installation_query": "pip install aws-sam-cli"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Google Cloud Platform (GCP)",
      "publisher": "Google LLC",
      "description": "A suite of cloud computing services that runs on the same infrastructure Google uses internally for its end-user products, such as Google Search and YouTube. For Java, key services include App Engine (PaaS), Compute Engine (IaaS VMs), Cloud Functions (serverless), Cloud SQL (managed databases), Cloud Pub/Sub (messaging), and GKE (managed Kubernetes).",
      "versions": [
        {
          "version_name": "General Availability (Continuous Updates)",
          "release_date": "Continuously evolving services",
          "supported_oses": ["N/A (Cloud Platform accessed via web, CLI, SDKs)"],
          "notes": "GCP offers a free tier and free trial credits. Requires a Google Cloud account. Uses Google Cloud SDK for CLI interactions. GitHub (Google Cloud Java): https://github.com/googleapis/google-cloud-java",
          "components": [
            {
              "component_name": "Google Cloud Account & Cloud Console",
              "notes": "The central hub for managing GCP resources.",
              "installation_methods": [
                {
                  "method_name": "Web Registration",
                  "type": "Web Interface",
                  "instructions": [
                    "1. Visit: https://cloud.google.com/free",
                    "2. Sign up for a free trial or create a billing account (requires credit card for verification, free tier/trial is not charged for covered usage)."
                  ],
                  "installation_query": "N/A (Web-based registration)"
                }
              ]
            },
            {
              "component_name": "Google Cloud SDK (gcloud CLI)",
              "notes": "A set of tools for Google Cloud Platform, including `gcloud`, `gsutil`, and `bq`.",
              "installation_methods": [
                {
                  "method_name": "Installers (Windows, macOS)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download and run the installer for your OS from: https://cloud.google.com/sdk/docs/install",
                    "2. Follow prompts to initialize SDK (`gcloud init`)."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. Add the Cloud SDK distribution URI as a package source: `echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list`",
                    "2. Import the Google Cloud public key: `sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -`",
                    "3. Update and install: `sudo apt update && sudo apt install google-cloud-sdk -y`",
                    "4. Initialize: `gcloud init`"
                  ],
                  "installation_query": "echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && sudo apt update && sudo apt install google-cloud-sdk -y && gcloud init"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install google-cloud-sdk`",
                    "2. Initialize: `gcloud init`"
                  ],
                  "installation_query": "brew install google-cloud-sdk && gcloud init"
                }
              ]
            },
            {
              "component_name": "Google Cloud Client Libraries for Java",
              "notes": "Idiomatic client libraries for specific GCP services, simplifying interaction with APIs for Compute Engine, Storage, Pub/Sub, etc.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the Google Cloud BOM to your `pom.xml`'s `<dependencyManagement>` section:",
                    "   ```xml",
                    "   <dependencyManagement>",
                    "     <dependencies>",
                    "       <dependency>",
                    "         <groupId>com.google.cloud</groupId>",
                    "         <artifactId>google-cloud-bom</artifactId>",
                    "         <version>0.229.0</version>",
                    "         <type>pom</type>",
                    "         <scope>import</scope>",
                    "       </dependency>",
                    "     </dependencies>",
                    "   </dependencyManagement>",
                    "   ```",
                    "2. Add specific service dependencies (e.g., Storage, Pub/Sub) to `<dependencies>` without specifying version:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.google.cloud</groupId>",
                    "     <artifactId>google-cloud-storage</artifactId>",
                    "   </dependency>",
                    "   <dependency>",
                    "     <groupId>com.google.cloud</groupId>",
                    "     <artifactId>google-cloud-pubsub</artifactId>",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add specific service dependencies to your `build.gradle` (using the BOM):",
                    "   ```groovy",
                    "   dependencies {",
                    "     implementation platform('com.google.cloud:google-cloud-bom:0.229.0')",
                    "     implementation 'com.google.cloud:google-cloud-storage'",
                    "     implementation 'com.google.cloud:google-cloud-pubsub'",
                    "   }",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Microsoft Azure",
      "publisher": "Microsoft Corporation",
      "description": "Microsoft's cloud computing platform, offering a wide range of services for computing, analytics, storage, and networking. For Java, relevant services include Azure App Service (PaaS), Azure Virtual Machines (IaaS), Azure Functions (serverless), Azure SQL Database (managed SQL), Azure Cosmos DB (NoSQL), Azure Service Bus (messaging), and Azure Kubernetes Service (AKS).",
      "versions": [
        {
          "version_name": "General Availability (Continuous Updates)",
          "release_date": "Continuously evolving services",
          "supported_oses": ["N/A (Cloud Platform accessed via web, CLI, SDKs)"],
          "notes": "Azure offers a free account with credits and free services. Requires a Microsoft Azure account. Uses Azure CLI for command-line management. GitHub (Azure SDK for Java): https://github.com/Azure/azure-sdk-for-java",
          "components": [
            {
              "component_name": "Azure Account & Azure Portal",
              "notes": "The web-based console for managing Azure resources.",
              "installation_methods": [
                {
                  "method_name": "Web Registration",
                  "type": "Web Interface",
                  "instructions": [
                    "1. Visit: https://azure.microsoft.com/en-us/free/",
                    "2. Click 'Start free' and follow the sign-up process (requires phone number and credit card for identity verification)."
                  ],
                  "installation_query": "N/A (Web-based registration)"
                }
              ]
            },
            {
              "component_name": "Azure CLI",
              "notes": "A cross-platform command-line tool for managing Azure resources.",
              "installation_methods": [
                {
                  "method_name": "Installers (Windows, macOS)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download installer for Windows (.msi) or macOS (.pkg) from: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli",
                    "2. Run the installer and follow prompts."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `curl -sL https://aka.ms/InstallAzureCliDeb | sudo bash`"
                  ],
                  "installation_query": "curl -sL https://aka.ms/InstallAzureCliDeb | sudo bash"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew update && brew install azure-cli`"
                  ],
                  "installation_query": "brew update && brew install azure-cli"
                }
              ]
            },
            {
              "component_name": "Azure SDK for Java",
              "notes": "The official Java SDK for interacting with Azure services, following Azure's consistent design principles.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add the Azure BOM to your `pom.xml`'s `<dependencyManagement>` section:",
                    "   ```xml",
                    "   <dependencyManagement>",
                    "     <dependencies>",
                    "       <dependency>",
                    "         <groupId>com.azure</groupId>",
                    "         <artifactId>azure-sdk-bom</artifactId>",
                    "         <version>1.2.22</version>",
                    "         <type>pom</type>",
                    "         <scope>import</scope>",
                    "       </dependency>",
                    "     </dependencies>",
                    "   </dependencyManagement>",
                    "   ```",
                    "2. Add specific service dependencies (e.g., Azure Storage Blob, Azure Identity) to `<dependencies>` without specifying version:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>com.azure</groupId>",
                    "     <artifactId>azure-storage-blob</artifactId>",
                    "   </dependency>",
                    "   <dependency>",
                    "     <groupId>com.azure</groupId>",
                    "     <artifactId>azure-identity</artifactId>",
                    "   </dependency>",
                    "   ```"
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add specific service dependencies to your `build.gradle` (using the BOM):",
                    "   ```groovy",
                    "   dependencies {",
                    "     implementation platform('com.azure:azure-sdk-bom:1.2.22')",
                    "     implementation 'com.azure:azure-storage-blob'",
                    "     implementation 'com.azure:azure-identity'",
                    "   }",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Git & GitHub",
      "publisher": "Git (open source), GitHub, Inc.",
      "description": "Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. GitHub is a web-based platform that provides hosting for Git repositories and adds collaboration features. Essential for any backend development.",
      "versions": [
        {
          "version_name": "Latest Git (e.g., 2.45.2) / GitHub (Continuous)",
          "release_date": "Constantly updated",
          "supported_oses": ["Linux, Windows, macOS"],
          "notes": "Git is a local tool; GitHub is a cloud service. GitHub also offers a CLI tool. GitHub (Git): https://github.com/git/git, GitHub (GitHub CLI): https://github.com/cli/cli",
          "components": [
            {
              "component_name": "Git (Version Control System)",
              "notes": "The core distributed version control system.",
              "installation_methods": [
                {
                  "method_name": "Official Installer (Windows)",
                  "type": "Executable Installer",
                  "instructions": [
                    "1. Download Git for Windows from: https://git-scm.com/download/win",
                    "2. Run the installer and accept default options, or customize as needed."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install git`"
                  ],
                  "installation_query": "brew install git"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo apt update && sudo apt install git -y`"
                  ],
                  "installation_query": "sudo apt update && sudo apt install git -y"
                },
                {
                  "method_name": "DNF/YUM (RHEL/CentOS/Fedora Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `sudo dnf install git -y`"
                  ],
                  "installation_query": "sudo dnf install git -y"
                }
              ]
            },
            {
              "component_name": "GitHub Account",
              "notes": "Required for hosting public/private repositories on GitHub and using its collaborative features.",
              "installation_methods": [
                {
                  "method_name": "Web Registration",
                  "type": "Web Interface",
                  "instructions": [
                    "1. Visit: https://github.com/join",
                    "2. Follow the sign-up process."
                  ],
                  "installation_query": "N/A (Web-based registration)"
                }
              ]
            },
            {
              "component_name": "GitHub CLI (gh)",
              "notes": "A command-line tool for interacting with GitHub from your terminal. Lets you create PRs, issues, manage gists, etc.",
              "installation_methods": [
                {
                  "method_name": "Homebrew (macOS)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `brew install gh`"
                  ],
                  "installation_query": "brew install gh"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install gh -y`"
                  ],
                  "installation_query": "choco install gh -y"
                },
                {
                  "method_name": "APT (Debian/Ubuntu Linux)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg`",
                    "2. `echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null`",
                    "3. `sudo apt update && sudo apt install gh -y`"
                  ],
                  "installation_query": "curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && sudo apt update && sudo apt install gh -y"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Postman",
      "publisher": "Postman, Inc.",
      "description": "An API platform for building and using APIs. It simplifies each step of the API lifecycle and streamlines collaboration so you can create better APIs faster. Essential for testing and documenting Java backend APIs.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 10.25.0)",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows, macOS, Linux (various distributions)"],
          "notes": "Available as a desktop application and a web version. Requires a Postman account for cloud synchronization features. Website: https://www.postman.com/",
          "components": [
            {
              "component_name": "Postman Desktop Application",
              "notes": "The standalone application for comprehensive API development and testing.",
              "installation_methods": [
                {
                  "method_name": "Direct Download",
                  "type": "Executable Installer / AppImage",
                  "instructions": [
                    "1. Download for your OS from: https://www.postman.com/downloads/",
                    "2. Run the installer (Windows/macOS) or execute the AppImage (Linux)."
                  ],
                  "installation_query": "N/A (GUI installer)"
                },
                {
                  "method_name": "Chocolatey (Windows)",
                  "type": "Package Manager",
                  "instructions": [
                    "1. `choco install postman -y`"
                  ],
                  "installation_query": "choco install postman -y"
                },
                {
                  "method_name": "Homebrew Cask (macOS)",
                  "type": "Package Manager / Software Store",
                  "instructions": [
                    "1. `brew install --cask postman`"
                  ],
                  "installation_query": "brew install --cask postman"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "OpenAPI / Swagger",
      "publisher": "SmartBear Software (Swagger), Linux Foundation (OpenAPI Initiative)",
      "description": "The OpenAPI Specification (OAS) defines a standard, language-agnostic interface for RESTful APIs, which allows both humans and computers to discover and understand the capabilities of a service without access to source code or documentation. Swagger is a set of open-source tools built around the OpenAPI Specification, including Swagger UI (for API documentation) and Swagger Codegen (for generating API clients and server stubs).",
      "versions": [
        {
          "version_name": "OpenAPI Specification (e.g., 3.1.0) / Swagger UI (e.g., 5.17.4)",
          "release_date": "Constantly updated",
          "supported_oses": ["N/A (Specification/Tools)"],
          "notes": "Widely used in Java backend development for API design-first approaches, documentation generation, and client code generation. GitHub (OpenAPI Specification): https://github.com/OAI/OpenAPI-Specification, GitHub (Swagger UI): https://github.com/swagger-api/swagger-ui, GitHub (Swagger Codegen): https://github.com/swagger-api/swagger-codegen",
          "components": [
            {
              "component_name": "Swagger UI (Static/Embedded)",
              "notes": "Provides a visual representation of your API, allowing developers to interact with and test API endpoints directly from the browser. Can be served statically or embedded in a Spring Boot app.",
              "installation_methods": [
                {
                  "method_name": "Maven Dependency (Springdoc-OpenAPI)",
                  "type": "Build Tool Dependency",
                  "notes": "Springdoc-OpenAPI is a popular library for generating OpenAPI documentation and Swagger UI from Spring Boot applications.",
                  "instructions": [
                    "1. Add to your `pom.xml`:",
                    "   ```xml",
                    "   <dependency>",
                    "     <groupId>org.springdoc</groupId>",
                    "     <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>",
                    "     <version>2.5.0</version> ",
                    "   </dependency>",
                    "   ```",
                    "2. After running your Spring Boot app, access Swagger UI at `http://localhost:8080/swagger-ui.html`."
                  ],
                  "installation_query": "N/A (Maven manages download)"
                },
                {
                  "method_name": "Gradle Dependency (Springdoc-OpenAPI)",
                  "type": "Build Tool Dependency",
                  "instructions": [
                    "1. Add to your `build.gradle`:",
                    "   ```groovy",
                    "   implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'",
                    "   ```"
                  ],
                  "installation_query": "N/A (Gradle manages download)"
                }
              ]
            },
            {
              "component_name": "Swagger Codegen (CLI / Maven Plugin)",
              "notes": "Generates API clients, server stubs, and documentation from an OpenAPI Specification (YAML/JSON).",
              "installation_methods": [
                {
                  "method_name": "CLI (JAR executable)",
                  "type": "Executable JAR",
                  "instructions": [
                    "1. Download the latest `swagger-codegen-cli.jar` from Swagger Codegen GitHub releases.",
                    "2. Run: `java -jar swagger-codegen-cli.jar generate -i your-openapi-spec.yaml -l java -o generated-code`"
                  ],
                  "installation_query": "N/A (Manual download)"
                },
                {
                  "method_name": "Maven Plugin",
                  "type": "Build Tool Plugin",
                  "instructions": [
                    "1. Add the plugin to your `pom.xml`'s `<build><plugins>` section:",
                    "   ```xml",
                    "   <plugin>",
                    "     <groupId>io.swagger.codegen.v3</groupId>",
                    "     <artifactId>swagger-codegen-maven-plugin</artifactId>",
                    "     <version>3.0.55</version>",
                    "     <executions>",
                    "       <execution>",
                    "         <goals>",
                    "           <goal>generate</goal>",
                    "         </goals>",
                    "         <configuration>",
                    "           <inputSpec>${project.basedir}/src/main/resources/openapi.yaml</inputSpec>",
                    "           <language>java</language>",
                    "           <output>${project.build.directory}/generated-sources/swagger</output>",
                    "           <modelPackage>com.example.model</modelPackage>",
                    "           <apiPackage>com.example.api</apiPackage>",
                    "         </configuration>",
                    "       </execution>",
                    "     </executions>",
                    "   </plugin>",
                    "   ```",
                    "2. Run `mvn generate-sources`."
                  ],
                  "installation_query": "N/A (Maven manages plugin)"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "Version_Control_Systems": [
    {
      "name": "Git",
      "publisher": "Linus Torvalds (original author), Git Development Community",
      "description": "A free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Essential for collaborative software development.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 2.45.1)",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows", "macOS", "Linux"],
          "notes": "Used for managing source code, collaborating with teams, and deploying projects. Often integrated directly into IDEs.",
          "installation_methods": [
            {
              "method_name": "Git for Windows (Installer)",
              "type": "Executable Installer",
              "instructions": [
                "1. Download from: https://git-scm.com/download/win",
                "2. Run the installer and accept the default options (or customize as needed). This will install Git Bash, Git GUI, and integrate with Command Prompt/PowerShell.",
                "3. Verify: `git --version` in Command Prompt or Git Bash."
              ],
              "installation_query": "N/A (GUI installer, but can be silent)"
            },
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. Ensure Homebrew is installed.",
                "2. Install Git: `brew install git`",
                "3. Verify: `git --version`"
              ],
              "installation_query": "brew install git"
            },
            {
              "method_name": "APT (Debian/Ubuntu Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo apt update`",
                "2. `sudo apt install git -y`",
                "3. Verify: `git --version`"
              ],
              "installation_query": "sudo apt update && sudo apt install git -y"
            },
            {
              "method_name": "DNF/YUM (Fedora/RHEL/CentOS Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo dnf install git -y` (or `sudo yum install git -y`)"
              ],
              "installation_query": "sudo dnf install git -y"
            },
            {
              "method_name": "Pacman (Arch Linux)",
              "type": "Package Manager",
              "instructions": [
                "1. `sudo pacman -S git`"
              ],
              "installation_query": "sudo pacman -S git"
            },
            {
              "method_name": "Winget (Windows 10/11)",
              "type": "Package Manager",
              "instructions": [
                "1. `winget install Git.Git`"
              ],
              "installation_query": "winget install Git.Git"
            },
            {
              "method_name": "Chocolatey (Windows)",
              "type": "Package Manager",
              "instructions": [
                "1. `choco install git`"
              ],
              "installation_query": "choco install git"
            }
          ]
        }
      ]
    }
  ],
  "Java_Versioning_Tools": [
    {
      "name": "SDKMAN!",
      "publisher": "SDKMAN! Team (Open Source)",
      "description": "A powerful command-line tool for managing multiple versions of various Software Development Kits (SDKs) including Java (JDKs), Groovy, Scala, Kotlin, Maven, Gradle, and more, on Unix-like systems. It simplifies switching between different SDK versions for different projects.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 5.18.5)",
          "release_date": "Constantly updated",
          "supported_oses": ["Linux", "macOS", "WSL (Windows Subsystem for Linux)"],
          "notes": "Requires `curl` and `zip`/`unzip` or `unzip` and `tar`. Integrates well with most shells (Bash, Zsh, Fish).",
          "installation_methods": [
            {
              "method_name": "Curl (Linux/macOS/WSL)",
              "type": "Shell Script",
              "instructions": [
                "1. Open your terminal.",
                "2. Install `curl` and `zip`/`unzip` if not present (e.g., `sudo apt install curl zip unzip`).",
                "3. Run the installation script: `curl -s \"https://get.sdkman.io\" | bash`",
                "4. Follow the instructions to complete the installation (usually `source \"$HOME/.sdkman/bin/sdkman-init.sh\"` or restarting your terminal).",
                "5. Verify installation: `sdk version`",
                "6. Install a Java version (e.g., Temurin 21): `sdk install java 21.0.3-tem` (use `sdk list java` to find available versions).",
                "7. Set as default: `sdk default java 21.0.3-tem` (or `sdk use java 21.0.3-tem` for current shell)."
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\""
            }
          ]
        }
      ]
    },
    {
      "name": "jEnv",
      "publisher": "jEnv Project (Open Source)",
      "description": "A command-line tool designed specifically for managing multiple Java Development Kit (JDK) versions. It works by modifying your shell's PATH, allowing you to set a global Java version, a local (project-specific) version, and a shell-specific version.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 0.5.6)",
          "release_date": "Constantly updated",
          "supported_oses": ["macOS", "Linux"],
          "notes": "Relies on JDKs already being installed on your system. Only manages the `JAVA_HOME` environment variable and `PATH`.",
          "installation_methods": [
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. `brew install jenv`",
                "2. Add jEnv to your shell's profile (e.g., `echo 'eval \"$(jenv init -)\"' >> ~/.zshrc` for Zsh, or `~/.bash_profile` for Bash). Restart your terminal.",
                "3. Add your installed JDKs to jEnv (e.g., `jenv add /Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home`).",
                "4. Set global version: `jenv global 21.0.3` (or `jenv local 21.0.3` in a project directory)."
              ],
              "installation_query": "brew install jenv"
            },
            {
              "method_name": "Git Clone (Linux/macOS)",
              "type": "Manual Installation",
              "instructions": [
                "1. `git clone https://github.com/jenv/jenv.git ~/.jenv`",
                "2. Add to your shell's profile (similar to Homebrew step 2).",
                "3. Add JDKs and set versions (similar to Homebrew steps 3 & 4)."
              ],
              "installation_query": "git clone https://github.com/jenv/jenv.git ~/.jenv"
            }
          ]
        }
      ]
    },
    {
      "name": "asdf-vm",
      "publisher": "asdf-vm Project (Open Source)",
      "description": "A versatile version manager for multiple language runtimes, including Java, Node.js, Python, Ruby, and many more, using a plugin-based architecture. It provides a consistent interface for managing different tools.",
      "versions": [
        {
          "version_name": "Latest Stable (e.g., 0.14.0)",
          "release_date": "Constantly updated",
          "supported_oses": ["Linux", "macOS", "WSL"],
          "notes": "Requires `git` and other build dependencies for various plugins. You need to install a specific plugin for Java (`asdf-java`) to manage JDK versions.",
          "installation_methods": [
            {
              "method_name": "Homebrew (macOS)",
              "type": "Package Manager",
              "instructions": [
                "1. `brew install asdf`",
                "2. Add asdf to your shell's profile (e.g., `echo '. $(brew --prefix asdf)/libexec/asdf.sh' >> ~/.zshrc`). Restart your terminal.",
                "3. Add the Java plugin: `asdf plugin add java https://github.com/halcyon/asdf-java.git`",
                "4. Install a Java version: `asdf install java openjdk-21.0.3` (use `asdf list-all java` to see available versions).",
                "5. Set global or local version: `asdf global java openjdk-21.0.3` or `asdf local java openjdk-21.0.3`."
              ],
              "installation_query": "brew install asdf"
            },
            {
              "method_name": "Git Clone (Linux/macOS/WSL)",
              "type": "Manual Installation",
              "instructions": [
                "1. `git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0` (Use the latest version tag).",
                "2. Add asdf to your shell's profile (e.g., `echo '. $HOME/.asdf/asdf.sh' >> ~/.bashrc`). Restart your terminal.",
                "3. Add the Java plugin: `asdf plugin add java https://github.com/halcyon/asdf-java.git`",
                "4. Install a Java version and set global/local version (similar to Homebrew steps 4 & 5)."
              ],
              "installation_query": "git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0"
            }
          ]
        }
      ]
    }
  ],
  "Cross_Platform_Tool_Managers": [
    {
      "name": "SDKMAN!",
      "publisher": "SDKMAN! Development Team",
      "description": "A command-line tool for managing parallel versions of multiple Software Development Kits on most Unix-like systems. Great for managing different JDKs and Gradle versions.",
      "versions": [
        {
          "version_name": "Latest Stable",
          "release_date": "Constantly updated",
          "supported_oses": ["Linux", "macOS", "WSL", "Cygwin", "MSYS2"],
          "notes": "Highly recommended for managing multiple JDK and Gradle versions efficiently. GitHub: https://github.com/sdkman/sdkman-cli",
          "installation_methods": [
            {
              "method_name": "Scripted Installation",
              "type": "Shell Script",
              "instructions": [
                "1. Ensure you have `curl` and `zip`/`unzip` installed.",
                "2. Open a terminal and run:",
                "   `curl -s \"https://get.sdkman.io\" | bash`",
                "3. Follow the on-screen instructions to complete the installation and initialize SDKMAN! in your shell (usually `source \"$HOME/.sdkman/bin/sdkman-init.sh\"`).",
                "4. Verify: `sdk version`"
              ],
              "installation_query": "curl -s \"https://get.sdkman.io\" | bash && source \"$HOME/.sdkman/bin/sdkman-init.sh\""
            }
          ]
        }
      ]
    },
    {
      "name": "Homebrew",
      "publisher": "Homebrew Project",
      "description": "The missing package manager for macOS (and Linux). Installs the stuff you need that Apple (or your Linux distribution) didn’t. Useful for installing various dev tools.",
      "versions": [
        {
          "version_name": "Latest Stable",
          "release_date": "Constantly updated",
          "supported_oses": ["macOS", "Linux (Linuxbrew)"],
          "notes": "Primary package manager for developers on macOS. GitHub: https://github.com/Homebrew/brew",
          "installation_methods": [
            {
              "method_name": "Command-line Installation",
              "type": "Shell Script",
              "instructions": [
                "1. Open Terminal and run:",
                "   `/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`",
                "2. Follow the prompts to install Command Line Tools for Xcode (if on macOS) and Homebrew.",
                "3. Add Homebrew to your PATH if prompted (usually for older systems).",
                "4. Verify: `brew help`"
              ],
              "installation_query": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            }
          ]
        }
      ]
    },
    {
      "name": "Winget",
      "publisher": "Microsoft",
      "description": "The Windows Package Manager, a command-line tool for installing applications on Windows 10 and Windows 11. Provides a unified experience for installing software.",
      "versions": [
        {
          "version_name": "Latest Stable",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows 10/11"],
          "notes": "Pre-installed on modern Windows versions or available via Microsoft Store. GitHub: https://github.com/microsoft/winget-cli",
          "installation_methods": [
            {
              "method_name": "Microsoft Store / GitHub (built-in)",
              "type": "Software Store / Direct Download",
              "instructions": [
                "1. Winget is typically pre-installed with Windows 11 and recent Windows 10 versions (App Installer package).",
                "2. You can manually install/update it from the Microsoft Store by searching for 'App Installer' or from its GitHub releases page: https://github.com/microsoft/winget-cli/releases",
                "3. Open PowerShell or Command Prompt and verify: `winget --version`"
              ],
              "installation_query": "ms-windows-store://pdp/?ProductId=9NBGV4MXZLCX"
            }
          ]
        }
      ]
    },
    {
      "name": "Chocolatey",
      "publisher": "Chocolatey Software, Inc.",
      "description": "A package manager for Windows that works like `apt-get` or `yum` for Linux. Simplifies software installation and management via the command line.",
      "versions": [
        {
          "version_name": "Latest Stable",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows"],
          "notes": "Alternative to Winget, with a larger community package repository. GitHub: https://github.com/chocolatey/choco",
          "installation_methods": [
            {
              "method_name": "PowerShell Command",
              "type": "Shell Script",
              "instructions": [
                "1. Open PowerShell **as Administrator**.",
                "2. Set execution policy (if not already): `Set-ExecutionPolicy Bypass -Scope Process -Force;`",
                "3. Run the installation script:",
                "   `iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))`",
                "4. Verify: `choco --version`"
              ],
              "installation_query": "Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
            }
          ]
        }
      ]
    },
    {
      "name": "Scoop",
      "publisher": "Luke Sampson (Open Source)",
      "description": "A command-line installer for Windows. It provides a simple way to install, update, and manage applications and development tools without UAC popups or annoying GUI installers. It installs software to a user-local directory, keeping it separate from system files.",
      "versions": [
        {
          "version_name": "Latest Stable",
          "release_date": "Constantly updated",
          "supported_oses": ["Windows"],
          "notes": "Ideal for installing developer tools like Git, Node.js, Python, and various JDKs without administrative privileges. GitHub: https://github.com/ScoopInstaller/Scoop",
          "installation_methods": [
            {
              "method_name": "PowerShell Command",
              "type": "Shell Script",
              "instructions": [
                "1. Open PowerShell.",
                "2. Set execution policy (if not already): `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`",
                "3. Run the installation script:",
                "   `irm get.scoop.sh | iex`",
                "4. Verify: `scoop help`",
                "5. (Optional) Add extra buckets for more software: `scoop bucket add extras`"
              ],
              "installation_query": "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm get.scoop.sh | iex"
            }
          ]
        }
      ]
    }
  ]
  }
}}